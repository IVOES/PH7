ph7.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ph7.c:5057:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  iErr = PH7_CTX_ERR;
  ^
ph7.c:5106:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  iErr = PH7_CTX_ERR;
  ^
ph7.c:8868:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:9192:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9193:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:9397:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9398:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10590:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10591:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10626:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:10627:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:10658:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10659:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10685:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10686:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10711:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10712:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10738:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10739:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10758:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:10759:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:10924:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10925:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10952:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10953:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:10978:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pCtx);
 ^
ph7.c:10979:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:10980:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:11127:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:11128:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:11509:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:11510:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:11986:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:11987:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:12056:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:12057:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:12295:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:12296:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:12319:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:12320:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:12493:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg);
 ^
ph7.c:12494:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg); /* cc warning */
 ^
ph7.c:12658:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:12659:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:14062:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pKey);
   ^
ph7.c:14345:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:14346:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:14780:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pCtx); /* cc warning */
 ^
ph7.c:14791:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pKey); /* cc warning */
 ^
ph7.c:14792:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:15001:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:15002:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:15785:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pNS); /* cc warning */
  ^
ph7.c:15822:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pNS); /* cc warning */
  ^
ph7.c:15989:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(zMessage); /* cc warning */
 ^
ph7.c:17855:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:17856:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:19849:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19850:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:19876:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19877:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:19906:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19907:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:19937:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19938:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:19968:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19969:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(apArg);
  ^
ph7.c:22055:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pKey); /* cc warning */
  ^
ph7.c:22168:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pCtx); /* cc warning */
  ^
ph7.c:24625:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 recursive = 0; /* cc warning */
 ^
ph7.c:25163:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pResource); /* cc warning */
   ^
ph7.c:25212:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  pResource = 0; /* Compiler warning */
  ^
ph7.c:32388:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pLex); /* Prevent compiler warning */
 ^
ph7.c:34890:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:38494:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pCmpData); /* cc warning */
 ^
ph7.c:38611:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pCmpData); /* cc warning */
 ^
ph7.c:38695:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pB); /* cc warning */
 ^
ph7.c:38696:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pCmpData);
 ^
ph7.c:42545:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42571:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42579:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42593:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42602:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42611:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42624:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused);
 ^
ph7.c:42652:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused); /* cc warning */
 ^
ph7.c:42674:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUnused); /* cc warning */
 ^
ph7.c:42731:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:42740:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42749:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42758:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42767:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42776:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42785:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42794:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42803:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42812:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42821:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42830:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42839:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42848:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42857:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42866:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42875:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42884:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42893:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42902:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42911:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42920:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42929:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42938:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42947:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42956:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42965:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42974:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42983:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:42992:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:43001:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:43010:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:43019:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:43030:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:43041:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData);
 ^
ph7.c:43204:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43213:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43222:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43231:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43240:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43249:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43258:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43267:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43276:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43285:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43294:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43303:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43312:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43321:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43330:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43339:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43348:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43357:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43366:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43375:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43385:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43395:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43404:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43413:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43422:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43431:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43440:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43449:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43458:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43467:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43476:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43485:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43494:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43503:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43512:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43521:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43530:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43539:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43548:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43557:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43566:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43575:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43584:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43593:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43602:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43611:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43620:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43629:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43638:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43647:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43656:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43665:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43674:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43683:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43692:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43701:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43710:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43719:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43728:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43737:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43746:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43755:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43764:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43773:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43782:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43791:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43800:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43809:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43851:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43860:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43869:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43878:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43887:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43896:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43905:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43914:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43923:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43933:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43942:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43951:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43960:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43969:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43978:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43987:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43996:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44005:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44014:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44023:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44032:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44041:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44050:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44059:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44068:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44077:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44086:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44095:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44104:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44113:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44122:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44131:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44140:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44149:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44158:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44167:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44177:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44186:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44195:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44204:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44213:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44222:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44231:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44240:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44249:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44258:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44267:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44276:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44285:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44294:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44303:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44312:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:45045:4: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
   SXUNUSED(iCompileFlag); /* cc warning */
   ^
ph7.c:45177:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
ph7.c:45578:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:45590:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:45936:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:46002:5: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
    SXUNUSED(iCompileFlag); /* cc warning */
    ^
ph7.c:46236:3: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
ph7.c:52219:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg);
 ^
ph7.c:52220:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:53438:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  SXUNUSED(pKey); /* cc warning */
  ^
ph7.c:55536:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:57219:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pKey); /* cc warning */
 ^
ph7.c:58254:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:58255:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(apArg);
 ^
ph7.c:53224:24: warning: Either the condition 'n<(sizeof(azHtmlEscape)/sizeof(azHtmlEscape[0]))' is redundant or the array 'azHtmlEscape[40]' is accessed at index 40, which is out of bounds. [arrayIndexOutOfBoundsCond]
   int c = azHtmlEscape[n+1][0];
                       ^
ph7.c:53223:9: note: Assuming that condition 'n<(sizeof(azHtmlEscape)/sizeof(azHtmlEscape[0]))' is not redundant
  if( n < SX_ARRAYSIZE(azHtmlEscape) ){
        ^
ph7.c:53224:24: note: Array index out of bounds
   int c = azHtmlEscape[n+1][0];
                       ^
ph7.c:30479:14: warning: The address of local variable 'sEntry' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:9246:9: note: Address of variable taken here.
 SyZero(&sEntry,sizeof(VmShutdownCB));
        ^
ph7.c:9246:9: note: Calling function 'SyZero', 1st argument '&sEntry' value is lifetime=sEntry
 SyZero(&sEntry,sizeof(VmShutdownCB));
        ^
ph7.c:30479:14: note: The address of local variable 'sEntry' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sAux' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:13085:9: note: Address of variable taken here.
 SyZero(&sAux,sizeof(extract_aux_data)-sizeof(sAux.zWorker));
        ^
ph7.c:13085:9: note: Calling function 'SyZero', 1st argument '&sAux' value is lifetime=sAux
 SyZero(&sAux,sizeof(extract_aux_data)-sizeof(sAux.zWorker));
        ^
ph7.c:30479:14: note: The address of local variable 'sAux' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sURI' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:12723:22: note: Address of variable taken here.
 rc = VmHttpSplitURI(&sURI,zStr,(sxu32)nLen);
                     ^
ph7.c:12723:22: note: Calling function 'VmHttpSplitURI', 1st argument '&sURI' value is lifetime=sURI
 rc = VmHttpSplitURI(&sURI,zStr,(sxu32)nLen);
                     ^
ph7.c:16967:10: note: Calling function 'SyZero', 1st argument 'pOut' value is lifetime=sURI
  SyZero(pOut,sizeof(SyhttpUri));
         ^
ph7.c:30479:14: note: The address of local variable 'sURI' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sHdr' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:17180:11: note: Address of variable taken here.
   SyZero(&sHdr,sizeof(SyhttpHeader));
          ^
ph7.c:17180:11: note: Calling function 'SyZero', 1st argument '&sHdr' value is lifetime=sHdr
   SyZero(&sHdr,sizeof(SyhttpHeader));
          ^
ph7.c:30479:14: note: The address of local variable 'sHdr' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sKey' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:5678:33: note: Address of variable taken here.
  PH7_MemObjInitFromInt(&(*pVm),&sKey,0);
                                ^
ph7.c:5678:33: note: Calling function 'PH7_MemObjInitFromInt', 2nd argument '&sKey' value is lifetime=sKey
  PH7_MemObjInitFromInt(&(*pVm),&sKey,0);
                                ^
ph7.c:29479:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sKey
 SyZero(pObj,sizeof(ph7_value));
        ^
ph7.c:30479:14: note: The address of local variable 'sKey' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sResult' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:13313:31: note: Address of variable taken here.
   PH7_MemObjInitFromBool(pVm,&sResult,1);
                              ^
ph7.c:13313:31: note: Calling function 'PH7_MemObjInitFromBool', 2nd argument '&sResult' value is lifetime=sResult
   PH7_MemObjInitFromBool(pVm,&sResult,1);
                              ^
ph7.c:29494:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sResult
 SyZero(pObj,sizeof(ph7_value));
        ^
ph7.c:30479:14: note: The address of local variable 'sResult' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sKey' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:4484:37: note: Address of variable taken here.
 PH7_MemObjInitFromString(pMap->pVm,&sKey,0);
                                    ^
ph7.c:4484:37: note: Calling function 'PH7_MemObjInitFromString', 2nd argument '&sKey' value is lifetime=sKey
 PH7_MemObjInitFromString(pMap->pVm,&sKey,0);
                                    ^
ph7.c:29541:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sKey
 SyZero(pObj,sizeof(ph7_value));
        ^
ph7.c:30479:14: note: The address of local variable 'sKey' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:30479:14: warning: The address of local variable 'sKey' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:4625:37: note: Address of variable taken here.
 PH7_MemObjInitFromString(pMap->pVm,&sKey,0);
                                    ^
ph7.c:4625:37: note: Calling function 'PH7_MemObjInitFromString', 2nd argument '&sKey' value is lifetime=sKey
 PH7_MemObjInitFromString(pMap->pVm,&sKey,0);
                                    ^
ph7.c:29541:9: note: Calling function 'SyZero', 1st argument 'pObj' value is lifetime=sKey
 SyZero(pObj,sizeof(ph7_value));
        ^
ph7.c:30479:14: note: The address of local variable 'sKey' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:34974:29: warning: The address of local variable 'iNum' might be accessed at non-zero index. [objectIndex]
 unsigned char *zEnd = &zBuf[nLen];
                            ^
ph7.c:11054:35: note: Address of variable taken here.
 SyRandomness(&pVm->sPrng,(void *)&iNum,sizeof(sxu32));
                                  ^
ph7.c:11054:27: note: Calling function 'SyRandomness', 2nd argument '(void*)&iNum' value is lifetime=iNum
 SyRandomness(&pVm->sPrng,(void *)&iNum,sizeof(sxu32));
                          ^
ph7.c:34974:29: note: The address of local variable 'iNum' might be accessed at non-zero index.
 unsigned char *zEnd = &zBuf[nLen];
                            ^
ph7.c:11622:6: style: Condition '!ret_string' is always true [knownConditionTrueFalse]
 if( !ret_string ){
     ^
ph7.c:11608:19: note: Assignment 'ret_string=0', assigned value is 0
 int ret_string = 0;
                  ^
ph7.c:11610:11: note: Assuming condition is false
 if( nArg < 1 ){
          ^
ph7.c:11622:6: note: Condition '!ret_string' is always true
 if( !ret_string ){
     ^
ph7.c:11655:6: style: Condition '!ret_string' is always true [knownConditionTrueFalse]
 if( !ret_string ){
     ^
ph7.c:11641:19: note: Assignment 'ret_string=0', assigned value is 0
 int ret_string = 0;
                  ^
ph7.c:11643:11: note: Assuming condition is false
 if( nArg < 1 ){
          ^
ph7.c:11655:6: note: Condition '!ret_string' is always true
 if( !ret_string ){
     ^
ph7.c:14872:41: style: Condition 'pVm->json_rc!=JSON_ERROR_NONE' is always false [knownConditionTrueFalse]
 if( rc == SXERR_ABORT ||  pVm->json_rc != JSON_ERROR_NONE ){
                                        ^
ph7.c:14841:19: note: Assuming that condition 'pVm->json_rc!=JSON_ERROR_NONE' is not redundant
 if( pVm->json_rc != JSON_ERROR_NONE ){
                  ^
ph7.c:14872:41: note: Condition 'pVm->json_rc!=JSON_ERROR_NONE' is always false
 if( rc == SXERR_ABORT ||  pVm->json_rc != JSON_ERROR_NONE ){
                                        ^
ph7.c:32727:24: style: Condition 'errorflag>0' is always true [knownConditionTrueFalse]
      return errorflag > 0 ? SXERR_FORMAT : SXRET_OK;
                       ^
ph7.c:32722:19: note: Assignment 'errorflag=1', assigned value is 1
      errorflag = 1;
                  ^
ph7.c:32724:11: note: Assuming condition is false
   if( rc != SXRET_OK ){
          ^
ph7.c:32727:24: note: Condition 'errorflag>0' is always true
      return errorflag > 0 ? SXERR_FORMAT : SXRET_OK;
                       ^
ph7.c:32847:18: style: Condition 'longvalue<0' is always false [knownConditionTrueFalse]
   if( longvalue < 0 ){
                 ^
ph7.c:32844:24: note: Assuming that condition 'longvalue<0' is not redundant
          if( longvalue<0 ){
                       ^
ph7.c:32845:25: note: Assignment 'longvalue=-longvalue', assigned value is 0
            longvalue = -longvalue;
                        ^
ph7.c:32847:18: note: Condition 'longvalue<0' is always false
   if( longvalue < 0 ){
                 ^
ph7.c:32859:19: style: Condition 'longvalue<0' is always false [knownConditionTrueFalse]
    if( longvalue < 0 ){
                  ^
ph7.c:32856:17: note: Assuming that condition 'longvalue<0' is not redundant
   if( longvalue<0 ){
                ^
ph7.c:32857:17: note: Assignment 'longvalue=-longvalue', assigned value is 0
    longvalue = -longvalue;
                ^
ph7.c:32859:19: note: Condition 'longvalue<0' is always false
    if( longvalue < 0 ){
                  ^
ph7.c:51997:8: style: Condition 'n==0' is always true [knownConditionTrueFalse]
  if( n==0 && r>=0 && r<LARGEST_INT64-1 ){
       ^
ph7.c:51975:10: note: Assignment 'n=0', assigned value is 0
 int n = 0;
         ^
ph7.c:51977:11: note: Assuming condition is false
 if( nArg < 1 ){
          ^
ph7.c:51997:8: note: Condition 'n==0' is always true
  if( n==0 && r>=0 && r<LARGEST_INT64-1 ){
       ^
ph7.c:55155:14: style: Condition 'width>0' is always false [knownConditionTrueFalse]
   if( width > 0 ){
             ^
ph7.c:55148:11: note: Assignment 'width=0', assigned value is 0
  width = 0;
          ^
ph7.c:55155:14: note: Condition 'width>0' is always false
   if( width > 0 ){
             ^
ph7.c:55157:17: style: Condition 'n>0' is always true [knownConditionTrueFalse]
    if( vf && n > 0 ){
                ^
ph7.c:55155:14: note: Assuming that condition 'width>0' is not redundant
   if( width > 0 ){
             ^
ph7.c:55156:9: note: Assignment 'n=width', assigned value is 0
    n = width;
        ^
ph7.c:55157:17: note: Condition 'n>0' is always true
    if( vf && n > 0 ){
                ^
ph7.c:55285:13: style: Condition 'iVal<0' is always false [knownConditionTrueFalse]
   if( iVal < 0 ){
            ^
ph7.c:55282:19: note: Assuming that condition 'iVal<0' is not redundant
          if( iVal<0 ){
                  ^
ph7.c:55283:20: note: Assignment 'iVal=-iVal', assigned value is 0
            iVal = -iVal;
                   ^
ph7.c:55285:13: note: Condition 'iVal<0' is always false
   if( iVal < 0 ){
            ^
ph7.c:55297:14: style: Condition 'iVal<0' is always false [knownConditionTrueFalse]
    if( iVal < 0 ){
             ^
ph7.c:55294:12: note: Assuming that condition 'iVal<0' is not redundant
   if( iVal<0 ){
           ^
ph7.c:55295:12: note: Assignment 'iVal=-iVal', assigned value is 0
    iVal = -iVal;
           ^
ph7.c:55297:14: note: Condition 'iVal<0' is always false
    if( iVal < 0 ){
             ^
ph7.c:8575:78: warning: Possible null pointer dereference: pResult [nullPointer]
 rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pByteCode),pStack,-1,&(*pResult),0,FALSE);
                                                                             ^
ph7.c:12464:43: note: Calling function 'VmLocalExec', 3rd argument '0' value is 0
   VmLocalExec(&(*pVm),&pCatch->sByteCode,0);
                                          ^
ph7.c:8571:13: note: Assuming condition is Assuming condition is false
 if( pStack == 0 ){
            ^
ph7.c:8575:78: note: Null pointer dereference
 rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pByteCode),pStack,-1,&(*pResult),0,FALSE);
                                                                             ^
ph7.c:28593:36: warning: Possible null pointer dereference: pThis [nullPointer]
 rc = PH7_VmCallClassMethod(pVm,&(*pThis),pMeth,0,nArg,apArg);
                                   ^
ph7.c:7792:56: note: Calling function 'PH7_ClassInstanceCallMagicMethod', 3rd argument '0' value is 0
       PH7_ClassInstanceCallMagicMethod(&(*pVm),pClass,0,"__callStatic",sizeof("__callStatic")-1,&sName);
                                                       ^
ph7.c:28580:12: note: Assuming condition is Assuming condition is false
 if( pMeth == 0 ){
           ^
ph7.c:28593:36: note: Null pointer dereference
 rc = PH7_VmCallClassMethod(pVm,&(*pThis),pMeth,0,nArg,apArg);
                                   ^
ph7.c:38215:33: warning: Possible null pointer dereference: pKey [nullPointer]
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                                ^
ph7.c:29228:28: note: Calling function 'PH7_HashmapInsert', 2nd argument '0' value is 0
    PH7_HashmapInsert(pMap,0/* Automatic index assign */,&(*pObj));
                           ^
ph7.c:38208:46: note: Assuming condition is Assuming condition is false
 if( pVal && (pVal->iFlags & MEMOBJ_HASHMAP) && (ph7_hashmap *)pVal->x.pOther == pMap->pVm->pGlobal ){
                                             ^
ph7.c:38215:33: note: Null pointer dereference
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                                ^
ph7.c:38215:42: warning: Either the condition 'pVal' is redundant or there is possible null pointer dereference: pVal. [nullPointerRedundantCheck]
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                                         ^
ph7.c:38208:6: note: Assuming that condition 'pVal' is not redundant
 if( pVal && (pVal->iFlags & MEMOBJ_HASHMAP) && (ph7_hashmap *)pVal->x.pOther == pMap->pVm->pGlobal ){
     ^
ph7.c:38215:42: note: Null pointer dereference
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                                         ^
ph7.c:38259:38: warning: Possible null pointer dereference: pKey [nullPointer]
 rc = HashmapInsertByRef(&(*pMap),&(*pKey),nRefIdx);
                                     ^
ph7.c:8969:58: note: Calling function 'PH7_HashmapInsertByRef', 2nd argument '0' value is 0
  PH7_HashmapInsertByRef((ph7_hashmap *)pArray->x.pOther,0/*Automatic index assign*/,aSlot[n].nIdx);
                                                         ^
ph7.c:38252:14: note: Assuming condition is Assuming condition is false
 if( nRefIdx == pMap->pVm->nGlobalIdx ){
             ^
ph7.c:38259:38: note: Null pointer dereference
 rc = HashmapInsertByRef(&(*pMap),&(*pKey),nRefIdx);
                                     ^
ph7.c:60587:16: warning: Either the condition 'pVm==0' is redundant or there is possible null pointer dereference: pVm. [nullPointerRedundantCheck]
  sxu32 nErr = pVm->sCodeGen.nErr;
               ^
ph7.c:60586:36: note: Assuming that condition 'pVm==0' is not redundant
 if( pVm->sCodeGen.nErr > 0 || pVm == 0){
                                   ^
ph7.c:60587:16: note: Null pointer dereference
  sxu32 nErr = pVm->sCodeGen.nErr;
               ^
ph7.c:61487:60: warning: Possible null pointer dereference: pKey [nullPointer]
 rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,&(*pKey),&(*pValue));
                                                           ^
ph7.c:9017:30: note: Calling function 'ph7_array_add_elem', 2nd argument '0' value is 0
   ph7_array_add_elem(pArray,0/* Automatic index assign*/,pObj);
                             ^
ph7.c:61483:40: note: Assuming condition is Assuming condition is false
 if( (pArray->iFlags & MEMOBJ_HASHMAP) == 0 ){
                                       ^
ph7.c:61487:60: note: Null pointer dereference
 rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,&(*pKey),&(*pValue));
                                                           ^
ph7.c:8511:7: style: Redundant initialization for 'pOut'. The initialized value is overwritten before it is read. [redundantInitialization]
 pOut = &pTos[-pInstr->iP1 + 1];
      ^
ph7.c:8509:24: note: pOut is initialized
 ph7_value *pCur,*pOut = pTos;
                       ^
ph7.c:8511:7: note: pOut is overwritten
 pOut = &pTos[-pInstr->iP1 + 1];
      ^
ph7.c:11768:12: style: Variable 'iResult' is reassigned a value before the old one has been used. [redundantAssignment]
   iResult = ph7_value_to_bool(pCtx->pRet);
           ^
ph7.c:11761:10: note: iResult is assigned
 iResult = 1; /* cc warning */
         ^
ph7.c:11768:12: note: iResult is overwritten
   iResult = ph7_value_to_bool(pCtx->pRet);
           ^
ph7.c:17372:8: style: Variable 'zIn' is reassigned a value before the old one has been used. [redundantAssignment]
   zIn = &zPtr[1];
       ^
ph7.c:17355:9: note: zIn is assigned
    zIn = zPtr;
        ^
ph7.c:17372:8: note: zIn is overwritten
   zIn = &zPtr[1];
       ^
ph7.c:31643:24: style: Variable 'pEntry->pNextCollide' is reassigned a value before the old one has been used. [redundantAssignment]
  pEntry->pNextCollide = apNew[iBucket];
                       ^
ph7.c:31640:24: note: pEntry->pNextCollide is assigned
  pEntry->pNextCollide = pEntry->pPrevCollide = 0;
                       ^
ph7.c:31643:24: note: pEntry->pNextCollide is overwritten
  pEntry->pNextCollide = apNew[iBucket];
                       ^
ph7.c:34539:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack16((sxu16 *)&pArch->nEntry,&zBuf[8],sizeof(sxu16));
     ^
ph7.c:34534:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&nMagic,zBuf,sizeof(sxu32));
     ^
ph7.c:34539:6: note: rc is overwritten
  rc = SyLittleEndianUnpack16((sxu16 *)&pArch->nEntry,&zBuf[8],sizeof(sxu16));
     ^
ph7.c:34544:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pArch->nCentralSize,&zBuf[12],sizeof(sxu32));
     ^
ph7.c:34539:6: note: rc is assigned
  rc = SyLittleEndianUnpack16((sxu16 *)&pArch->nEntry,&zBuf[8],sizeof(sxu16));
     ^
ph7.c:34544:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pArch->nCentralSize,&zBuf[12],sizeof(sxu32));
     ^
ph7.c:34549:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pArch->nCentralOfft,&zBuf[16],sizeof(sxu32));
     ^
ph7.c:34544:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pArch->nCentralSize,&zBuf[12],sizeof(sxu32));
     ^
ph7.c:34549:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pArch->nCentralOfft,&zBuf[16],sizeof(sxu32));
     ^
ph7.c:34594:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack16(&pEntry->nComprMeth,&zCentral[10],sizeof(sxu16));
     ^
ph7.c:34569:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&nMagic,zCentral,sizeof(sxu32));
     ^
ph7.c:34594:6: note: rc is overwritten
  rc = SyLittleEndianUnpack16(&pEntry->nComprMeth,&zCentral[10],sizeof(sxu16));
     ^
ph7.c:34602:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pEntry->nCrc,&zCentral[16],sizeof(sxu32));
     ^
ph7.c:34594:6: note: rc is assigned
  rc = SyLittleEndianUnpack16(&pEntry->nComprMeth,&zCentral[10],sizeof(sxu16));
     ^
ph7.c:34602:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pEntry->nCrc,&zCentral[16],sizeof(sxu32));
     ^
ph7.c:34604:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pEntry->nByte,&zCentral[24],sizeof(sxu32));
     ^
ph7.c:34602:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pEntry->nCrc,&zCentral[16],sizeof(sxu32));
     ^
ph7.c:34604:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pEntry->nByte,&zCentral[24],sizeof(sxu32));
     ^
ph7.c:34613:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SyLittleEndianUnpack32(&pEntry->nByteCompr,&zCentral[20],sizeof(sxu32));
     ^
ph7.c:34604:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pEntry->nByte,&zCentral[24],sizeof(sxu32));
     ^
ph7.c:34613:6: note: rc is overwritten
  rc = SyLittleEndianUnpack32(&pEntry->nByteCompr,&zCentral[20],sizeof(sxu32));
     ^
ph7.c:34624:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SXRET_OK;
       ^
ph7.c:34613:6: note: rc is assigned
  rc = SyLittleEndianUnpack32(&pEntry->nByteCompr,&zCentral[20],sizeof(sxu32));
     ^
ph7.c:34624:8: note: rc is overwritten
    rc = SXRET_OK;
       ^
ph7.c:6161:14: warning: Redundant assignment of 'pTos->rVal' to itself. [selfAssignment]
  pTos->rVal = +pTos->rVal;
             ^
ph7.c:6164:16: warning: Redundant assignment of 'pTos->x.iVal' to itself. [selfAssignment]
  pTos->x.iVal = +pTos->x.iVal;
               ^
ph7.c:3480:18: style: The scope of the variable 'iCur' can be reduced. [variableScope]
 int iTarget,i,j,iCur,iMax;
                 ^
ph7.c:4385:9: style: The scope of the variable 'pChunk' can be reduced. [variableScope]
  void *pChunk;
        ^
ph7.c:4508:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:7237:9: style: The scope of the variable 'zName' can be reduced. [variableScope]
  char *zName;
        ^
ph7.c:7676:18: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
    SyHashEntry *pEntry;
                 ^
ph7.c:7701:17: style: The scope of the variable 'pValue' can be reduced. [variableScope]
     ph7_value *pValue = 0; /* cc warning */
                ^
ph7.c:7833:19: style: The scope of the variable 'pValue' can be reduced. [variableScope]
       ph7_value *pValue;
                  ^
ph7.c:8099:22: style: The scope of the variable 'pMeth' can be reduced. [variableScope]
   ph7_class_method *pMeth;
                     ^
ph7.c:8888:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 ph7_value *pObj = 0;
            ^
ph7.c:8987:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 ph7_value *pObj = 0;
            ^
ph7.c:9087:15: style: The scope of the variable 'pClass' can be reduced. [variableScope]
   ph7_class *pClass;
              ^
ph7.c:9094:24: style: The scope of the variable 'pMethod' can be reduced. [variableScope]
     ph7_class_method *pMethod;
                       ^
ph7.c:10017:15: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
 SyHashEntry *pEntry;
              ^
ph7.c:10018:12: style: The scope of the variable 'pName' can be reduced. [variableScope]
 SyString *pName;
           ^
ph7.c:11275:14: style: The scope of the variable 'zData' can be reduced. [variableScope]
 const char *zData;
             ^
ph7.c:11309:14: style: The scope of the variable 'zData' can be reduced. [variableScope]
 const char *zData;
             ^
ph7.c:11376:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 ph7_value *pObj;
            ^
ph7.c:11836:6: style: The scope of the variable 'nErr' can be reduced. [variableScope]
 int nErr = PH7_CTX_NOTICE;
     ^
ph7.c:11943:14: style: The scope of the variable 'zMessage' can be reduced. [variableScope]
 const char *zMessage,*zDest,*zHeader;
             ^
ph7.c:11943:24: style: The scope of the variable 'zDest' can be reduced. [variableScope]
 const char *zMessage,*zDest,*zHeader;
                       ^
ph7.c:11945:6: style: The scope of the variable 'iType' can be reduced. [variableScope]
 int iType = 0;
     ^
ph7.c:12187:15: style: The scope of the variable 'pObj' can be reduced. [variableScope]
   ph7_value *pObj;
              ^
ph7.c:12333:6: style: The scope of the variable 'nArg' can be reduced. [variableScope]
 int nArg = 1;
     ^
ph7.c:12403:14: style: The scope of the variable 'pClass' can be reduced. [variableScope]
  ph7_class *pClass;
             ^
ph7.c:13218:13: style: The scope of the variable 'pSuper' can be reduced. [variableScope]
 ph7_value *pSuper;
            ^
ph7.c:14542:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur;
             ^
ph7.c:14935:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue;
            ^
ph7.c:14969:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue;
            ^
ph7.c:16226:12: style: The scope of the variable 'c' can be reduced. [variableScope]
 int nByte,c,e;
           ^
ph7.c:16537:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:16895:28: style: The scope of the variable 'pStream' can be reduced. [variableScope]
 ph7_io_stream **apStream,*pStream;
                           ^
ph7.c:16898:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
ph7.c:17174:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
  sxi32 rc;
        ^
ph7.c:17219:22: style: The scope of the variable 'azMethods' can be reduced. [variableScope]
  static const char *azMethods[] = { "get","post","head","put"};
                     ^
ph7.c:17406:15: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
  const char *zPtr,*zDelimiter,*zEnd = &zIn[nByte];
              ^
ph7.c:17469:13: style: The scope of the variable 'pName' can be reduced. [variableScope]
  SyString *pName,*pValue,sRequest; /* Raw HTTP request */
            ^
ph7.c:20680:12: style: The scope of the variable 'nRead' can be reduced. [variableScope]
 ph7_int64 nRead;
           ^
ph7.c:20682:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
ph7.c:21295:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 ph7_int64 n,nRead;
           ^
ph7.c:21299:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc,nLen;
     ^
ph7.c:21694:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 ph7_int64 n;
           ^
ph7.c:21961:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 ph7_int64 n,nRead;
           ^
ph7.c:21963:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
ph7.c:22620:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 ph7_int64 n;
           ^
ph7.c:22691:12: style: The scope of the variable 'n' can be reduced. [variableScope]
 ph7_int64 n;
           ^
ph7.c:25276:10: style: The scope of the variable 'nWr' can be reduced. [variableScope]
 ssize_t nWr;
         ^
ph7.c:26878:8: style: The scope of the variable 'iNest' can be reduced. [variableScope]
 sxi32 iNest,iCur,iNode;
       ^
ph7.c:26878:19: style: The scope of the variable 'iNode' can be reduced. [variableScope]
 sxi32 iNest,iCur,iNode;
                  ^
ph7.c:27683:7: style: The scope of the variable 'zSalt' can be reduced. [variableScope]
 char zSalt[10];
      ^
ph7.c:27685:8: style: The scope of the variable 'nByte' can be reduced. [variableScope]
 sxu32 nByte;
       ^
ph7.c:27974:12: style: The scope of the variable 'pName' can be reduced. [variableScope]
 SyString *pName;
           ^
ph7.c:28645:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue;
            ^
ph7.c:28685:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue;   /* Attribute value */
            ^
ph7.c:29900:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
   sxi32 rc;
         ^
ph7.c:31628:10: style: The scope of the variable 'iBucket' can be reduced. [variableScope]
 sxu32 n,iBucket;
         ^
ph7.c:32886:22: style: The scope of the variable 'x' can be reduced. [variableScope]
          char *pre, x;
                     ^
ph7.c:33289:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:33649:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
ph7.c:33964:8: style: The scope of the variable 'pUserData' can be reduced. [variableScope]
 void *pUserData;
       ^
ph7.c:34291:19: style: The scope of the variable 'apEntry' can be reduced. [variableScope]
    SyHashEntry **apEntry;
                  ^
ph7.c:34656:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:34923:7: style: The scope of the variable 't' can be reduced. [variableScope]
 sxu8 t;
      ^
ph7.c:35017:8: style: The scope of the variable 't' can be reduced. [variableScope]
 sxu32 t;
       ^
ph7.c:35589:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:36548:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:36788:14: style: The scope of the variable 'pElem' can be reduced. [variableScope]
  ph7_value *pElem;
             ^
ph7.c:36942:9: style: The scope of the variable 'nBucket' can be reduced. [variableScope]
  sxu32 nBucket;
        ^
ph7.c:37788:18: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value sKey,*pVal;
                 ^
ph7.c:37837:18: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value sKey,*pVal;
                 ^
ph7.c:37838:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:37877:18: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value sKey,*pVal;
                 ^
ph7.c:39315:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:39762:13: style: The scope of the variable 'pObj' can be reduced. [variableScope]
 ph7_value *pObj;
            ^
ph7.c:39820:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:40047:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:40150:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:40311:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value *pVal,sNeedle;
            ^
ph7.c:40393:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value *pVal;
            ^
ph7.c:40478:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value *pVal;
            ^
ph7.c:40825:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value *pVal;
            ^
ph7.c:40904:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value *pVal;
            ^
ph7.c:41080:13: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 ph7_value *pVal;
            ^
ph7.c:41356:13: style: The scope of the variable 'pNeedle' can be reduced. [variableScope]
 ph7_value *pNeedle;
            ^
ph7.c:41360:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:41418:13: style: The scope of the variable 'pKey' can be reduced. [variableScope]
 ph7_value *pKey;
            ^
ph7.c:42137:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue;
            ^
ph7.c:42189:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue,*pUserData,sKey;
            ^
ph7.c:42240:13: style: The scope of the variable 'pValue' can be reduced. [variableScope]
 ph7_value *pValue,sKey;
            ^
ph7.c:44930:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:45080:19: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zIn,*zCur,*zEnd;
                  ^
ph7.c:45339:16: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
   const char *zPtr = 0;
               ^
ph7.c:46977:12: style: The scope of the variable 'pInstr' can be reduced. [variableScope]
  VmInstr *pInstr;
           ^
ph7.c:47149:12: style: The scope of the variable 'pInstr' can be reduced. [variableScope]
  VmInstr *pInstr;
           ^
ph7.c:47674:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:47698:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:47975:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:48210:8: style: The scope of the variable 'zDup' can be reduced. [variableScope]
 char *zDup;          /* Copy of argument name */
       ^
ph7.c:48483:7: style: The scope of the variable 'got_this' can be reduced. [variableScope]
  int got_this = 0; /* TRUE if $this have been seen */
      ^
ph7.c:49315:13: style: The scope of the variable 'pBaseName' can be reduced. [variableScope]
  SyString *pBaseName;
            ^
ph7.c:49361:14: style: The scope of the variable 'pIntName' can be reduced. [variableScope]
   SyString *pIntName;
             ^
ph7.c:52092:23: style: The scope of the variable 'zEnd' can be reduced. [variableScope]
 const char *zString,*zEnd;
                      ^
ph7.c:52145:14: style: The scope of the variable 'zString' can be reduced. [variableScope]
 const char *zString;
             ^
ph7.c:52180:14: style: The scope of the variable 'zString' can be reduced. [variableScope]
 const char *zString;
             ^
ph7.c:52240:14: style: The scope of the variable 'zNum' can be reduced. [variableScope]
 const char *zNum;
             ^
ph7.c:52507:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:52888:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur,*zIn,*zEnd;
             ^
ph7.c:52890:11: style: The scope of the variable 'c' can be reduced. [variableScope]
 int nLen,c;
          ^
ph7.c:52970:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur,*zIn,*zEnd;
             ^
ph7.c:52972:11: style: The scope of the variable 'nJump' can be reduced. [variableScope]
 int nLen,nJump;
          ^
ph7.c:53177:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur,*zIn,*zEnd;
             ^
ph7.c:53599:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:53818:16: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
   const char *zPtr;
               ^
ph7.c:53895:16: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
   const char *zPtr;
               ^
ph7.c:54221:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c,d;
     ^
ph7.c:54221:8: style: The scope of the variable 'd' can be reduced. [variableScope]
 int c,d;
       ^
ph7.c:54277:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:54330:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:54384:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:54445:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:54506:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:54589:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:54756:19: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zIn,*zCur,*zEnd;
                  ^
ph7.c:54829:6: style: The scope of the variable 'rc' can be reduced. [variableScope]
 int rc;
     ^
ph7.c:54877:19: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zIn,*zCur,*zEnd;
                  ^
ph7.c:55324:22: style: The scope of the variable 'x' can be reduced. [variableScope]
          char *pre, x;
                     ^
ph7.c:55882:14: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
 const char *zPtr;
             ^
ph7.c:55883:6: style: The scope of the variable 'isEnc' can be reduced. [variableScope]
 int isEnc;
     ^
ph7.c:55909:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
   sxi32 rc;
         ^
ph7.c:56031:14: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
 const char *zPtr;
             ^
ph7.c:56097:22: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
   SyString *aEntry,*pEntry;
                     ^
ph7.c:56098:10: style: The scope of the variable 'rc' can be reduced. [variableScope]
   sxi32 rc;
         ^
ph7.c:56123:14: style: The scope of the variable 'zPtr' can be reduced. [variableScope]
 const char *zPtr,*zTag;
             ^
ph7.c:56223:8: style: The scope of the variable 'iR' can be reduced. [variableScope]
 sxu32 iR;
       ^
ph7.c:56368:8: style: The scope of the variable 'c' can be reduced. [variableScope]
 int i,c;
       ^
ph7.c:56400:8: style: The scope of the variable 'c' can be reduced. [variableScope]
 int i,c;
       ^
ph7.c:56626:22: style: The scope of the variable 'c' can be reduced. [variableScope]
 int iLen,iListLen,i,c;
                     ^
ph7.c:56628:8: style: The scope of the variable 'rc' can be reduced. [variableScope]
 sxi32 rc;
       ^
ph7.c:56679:7: style: The scope of the variable 'zResult' can be reduced. [variableScope]
 char zResult[8];
      ^
ph7.c:56680:9: style: The scope of the variable 'j' can be reduced. [variableScope]
 int i, j;
        ^
ph7.c:58783:14: style: The scope of the variable 'zCur' can be reduced. [variableScope]
 const char *zCur,*zEnd = &zIn[nLen];
             ^
ph7.c:58784:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
ph7.c:61373:22: style: The scope of the variable 'pAux' can be reduced. [variableScope]
 ph7_aux_data *aAux,*pAux;
                     ^
ph7.c:61397:16: style: The scope of the variable 'pAux' can be reduced. [variableScope]
 ph7_aux_data *pAux;
               ^
ph7.c:9284:22: style: Checking if unsigned expression 'pSet->nUsed' is less than zero. [unsignedLessThanZero]
 if( SySetUsed(pSet) <= 0 ){
                     ^
ph7.c:28816:18: style: Checking if unsigned expression 'pVal->nByte' is less than zero. [unsignedLessThanZero]
 if( pVal->nByte <= 0 ){
                 ^
ph7.c:29340:18: style: Checking if unsigned expression 'sStr.nByte' is less than zero. [unsignedLessThanZero]
  if( sStr.nByte <= 0 ){
                 ^
ph7.c:29374:34: style: Checking if unsigned expression '(&pObj->sBlob)->nByte' is less than zero. [unsignedLessThanZero]
  if( SyBlobLength(&pObj->sBlob) <= 0 ){
                                 ^
ph7.c:30413:11: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
 if( nLen <= 0 ){
          ^
ph7.c:30417:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
ph7.c:30418:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
ph7.c:30419:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
ph7.c:30420:12: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
  if( nLen <= 0 ){ return 0; } if( zP[0] == 0 || zQ[0] == 0 || zP[0] != zQ[0] ){ break; } zP++; zQ++; nLen--;
           ^
ph7.c:30456:11: style: Checking if unsigned expression 'nLen' is less than zero. [unsignedLessThanZero]
 if( nLen <= 0 ){
          ^
ph7.c:30490:12: style: Checking if unsigned expression 'nSize' is less than zero. [unsignedLessThanZero]
 if( nSize <= 0 ){
           ^
ph7.c:31306:19: style: Checking if unsigned expression 'pSet->nSize' is less than zero. [unsignedLessThanZero]
  if( pSet->nSize <= 0 ){
                  ^
ph7.c:31394:18: style: Checking if unsigned expression 'pSet->nUsed' is less than zero. [unsignedLessThanZero]
 if( pSet->nUsed <= 0 ){
                 ^
ph7.c:31404:18: style: Checking if unsigned expression 'pSet->nUsed' is less than zero. [unsignedLessThanZero]
 if( pSet->nUsed <= 0 ){
                 ^
ph7.c:31591:44: style: Checking if unsigned expression 'pHash->nEntry' is less than zero. [unsignedLessThanZero]
 if( pHash->pCurrent == 0 || pHash->nEntry <= 0 ){
                                           ^
ph7.c:34691:20: style: Checking if unsigned expression 'pName->nByte' is less than zero. [unsignedLessThanZero]
  if( pName->nByte <= 0 || ( pEntry->nByte <= 0 && pName->zString[pName->nByte - 1] != '/') ){
                   ^
ph7.c:34691:44: style: Checking if unsigned expression 'pEntry->nByte' is less than zero. [unsignedLessThanZero]
  if( pName->nByte <= 0 || ( pEntry->nByte <= 0 && pName->zString[pName->nByte - 1] != '/') ){
                                           ^
ph7.c:36099:19: style: Checking if unsigned expression 'pStr->nByte' is less than zero. [unsignedLessThanZero]
  if( pStr->nByte <= 0 ){
                  ^
ph7.c:36110:23: style: Checking if unsigned expression 'pToken->nType' is less than zero. [unsignedLessThanZero]
    if( pToken->nType <= 0 ){
                      ^
ph7.c:36411:19: style: Checking if unsigned expression 'sDelim.nByte' is less than zero. [unsignedLessThanZero]
 if( sDelim.nByte <= 0 || zIn >= zEnd || zIn[0] != '\n' ){
                  ^
ph7.c:45168:18: style: Checking if unsigned expression 'pStr->nByte' is less than zero. [unsignedLessThanZero]
 if( pStr->nByte <= 0 ){
                 ^
ph7.c:3123:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_NewForeignFunction(&(*pVm),&(*pName),xFunc,pUserData,&pFunc);
                             ^
ph7.c:3123:38: style: Redundant pointer operation on 'pName' - it's already a pointer. [redundantPointerOp]
 rc = PH7_NewForeignFunction(&(*pVm),&(*pName),xFunc,pUserData,&pFunc);
                                     ^
ph7.c:3264:25: style: Redundant pointer operation on 'pContainer' - it's already a pointer. [redundantPointerOp]
  pVm->pByteContainer = &(*pContainer);
                        ^
ph7.c:3355:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pFrame = VmNewFrame(&(*pVm),pUserData,pThis);
                     ^
ph7.c:3407:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmRefObjInstall(&(*pVm),nIdx,SyHashLastEntry(&pTarget->hVar),0,0);
                      ^
ph7.c:3427:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    PH7_VmUnsetMemObj(&(*pVm),aSlot[n].nIdx,FALSE);
                      ^
ph7.c:3432:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    PH7_VmRefObjRemove(&(*pVm),aSlot[n].nIdx,(SyHashEntry *)aSlot[n].pUserData,0);
                       ^
ph7.c:3579:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pMemObj = PH7_ReserveMemObj(&(*pVm));
                               ^
ph7.c:3581:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                  ^
ph7.c:3589:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmLocalExec(&(*pVm),&pAttr->aByteCode,pMemObj);
                ^
ph7.c:3594:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmRefObjInstall(&(*pVm),pMemObj->nIdx,0,0,VM_REF_IDX_KEEP);
                       ^
ph7.c:3618:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   rc = PH7_VmInstallUserFunction(&(*pVm),&pMeth->sFunc,&pMeth->sVmName);
                                  ^
ph7.c:3653:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pMemObj = PH7_ReserveMemObj(&(*pVm));
                               ^
ph7.c:3661:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmLocalExec(&(*pVm),&pAttr->aByteCode,pMemObj);
                ^
ph7.c:3674:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmRefObjInstall(&(*pVm),pMemObj->nIdx,0,0,VM_REF_IDX_KEEP);
                       ^
ph7.c:4085:17: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 pVm->pEngine = &(*pEngine);
                ^
ph7.c:4117:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),&pVm->aExceptionCB[0]);
                ^
ph7.c:4118:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),&pVm->aExceptionCB[1]);
                ^
ph7.c:4119:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),&pVm->aErrCB[0]);
                ^
ph7.c:4120:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),&pVm->aErrCB[1]);
                ^
ph7.c:4121:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),&pVm->sAssertCallback);
                ^
ph7.c:4135:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = PH7_ReserveConstObj(&(*pVm),0);
                            ^
ph7.c:4142:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = PH7_ReserveConstObj(&(*pVm),0);
                            ^
ph7.c:4149:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = PH7_ReserveConstObj(&(*pVm),0);
                            ^
ph7.c:4156:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmEnterFrame(&(*pVm),0,0,0);
                   ^
ph7.c:4169:14: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmEvalChunk(&(*pVm),0,&sBuiltin,PH7_PHP_ONLY,FALSE);
             ^
ph7.c:4171:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_ResetCodeGenerator(&(*pVm),pEngine->xConf.xErr,pEngine->xConf.pErrData);
                        ^
ph7.c:4226:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_MemObjInit(&(*pVm),&pStack[nInstr - 1]);
                 ^
ph7.c:4256:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmEmitInstr(&(*pVm),PH7_OP_DONE,0,0,0,0);
                      ^
ph7.c:4261:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),&pVm->sExec); /* Assume a NULL return value */
                ^
ph7.c:4263:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pVm->aOps = VmNewOperandStack(&(*pVm),SySetUsed(pVm->pByteContainer));
                               ^
ph7.c:4281:33: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmRegisterSpecialFunction(&(*pVm));
                                ^
ph7.c:4287:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_HashmapCreateSuper(&(*pVm));
                             ^
ph7.c:4293:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_RegisterBuiltInConstant(&(*pVm));
                             ^
ph7.c:4295:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_RegisterBuiltInFunction(&(*pVm));
                             ^
ph7.c:4299:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmMountUserClass(&(*pVm),(ph7_class *)pEntry->pUserData);
                        ^
ph7.c:4305:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pVm->unique_id = PH7_VmRandomNum(&(*pVm)) & 1023;
                                  ^
ph7.c:4462:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pObj = VmReserveMemObj(&(*pVm),&nIdx);
                         ^
ph7.c:4468:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInit(&(*pVm),pObj);
                ^
ph7.c:4487:30: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = PH7_HashmapInsertByRef(&(*pMap),&sKey,nRefIdx);
                             ^
ph7.c:4538:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pObj = PH7_ReserveMemObj(&(*pVm));
                            ^
ph7.c:4568:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmRefObjInstall(&(*pVm),nIdx,SyHashLastEntry(&pFrame->hVar),0,0);
                       ^
ph7.c:4641:25: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = PH7_HashmapInsert(&(*pMap),&sKey,&sValue);
                        ^
ph7.c:4768:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pObj = PH7_ReserveMemObj(&(*pVm));
                            ^
ph7.c:4791:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    PH7_VmRefObjInstall(&(*pVm),nIdx,pRef,0,0);
                        ^
ph7.c:4814:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_ENV",sizeof("_ENV")-1);
                           ^
ph7.c:4817:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_POST",sizeof("_POST")-1);
                           ^
ph7.c:4820:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_GET",sizeof("_GET")-1);
                           ^
ph7.c:4823:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_COOKIE",sizeof("_COOKIE")-1);
                           ^
ph7.c:4826:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_SESSION",sizeof("_SESSION")-1);
                           ^
ph7.c:4829:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_HEADER",sizeof("_HEADER")-1);
                           ^
ph7.c:4832:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pValue = VmExtractSuper(&(*pVm),"_SERVER",sizeof("_SERVER")-1);
                           ^
ph7.c:4856:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pValue = VmExtractSuper(&(*pVm),"argv",sizeof("argv")-1);
                          ^
ph7.c:4939:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmHttpProcessRequest(&(*pVm),zRequest,nByte);
                            ^
ph7.c:5068:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmCallErrorHandler(&(*pVm),pWorker);
                         ^
ph7.c:5117:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmCallErrorHandler(&(*pVm),pWorker);
                         ^
ph7.c:5133:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmThrowErrorAp(&(*pVm),0,iErr,zFormat,ap);
                     ^
ph7.c:5148:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmThrowErrorAp(&(*pVm),&(*pFuncName),iErr,zFormat,ap);
                     ^
ph7.c:5148:30: style: Redundant pointer operation on 'pFuncName' - it's already a pointer. [redundantPointerOp]
 rc = VmThrowErrorAp(&(*pVm),&(*pFuncName),iErr,zFormat,ap);
                             ^
ph7.c:5447:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_WARNING,
                   ^
ph7.c:5504:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pClass = PH7_VmExtractClass(&(*pVm),(const char *)SyBlobData(&pTos->sBlob),
                               ^
ph7.c:5585:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = VmExtractMemObj(&(*pVm),&sName,pInstr->p3 ? FALSE : TRUE,pInstr->iP1 != 1);
                        ^
ph7.c:5598:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Fatal, PH7 engine is running out of memory while loading variable '%z'",&sName);
                 ^
ph7.c:5617:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap = PH7_NewHashmap(&(*pVm),0,0);
                       ^
ph7.c:5619:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                ^
ph7.c:5678:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_MemObjInitFromInt(&(*pVm),&sKey,0);
                        ^
ph7.c:5724:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_NOTICE,
                    ^
ph7.c:5894:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,
                    ^
ph7.c:5923:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = VmExtractMemObj(&(*pVm),&sName,pInstr->p3 ? FALSE : TRUE,TRUE);
                        ^
ph7.c:5925:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                ^
ph7.c:6010:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Fatal, PH7 engine is running out of memory while creating a new array");
                  ^
ph7.c:6251:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                    ^
ph7.c:6296:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:6390:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:6427:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Division by zero %qd%%0",a);
                ^
ph7.c:6468:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Division by zero %qd%%0",a);
                ^
ph7.c:6477:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:6513:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Division by zero");
                   ^
ph7.c:6556:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Division by zero %qd/0",a);
                ^
ph7.c:6567:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:6679:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:6775:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:6845:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Cannot perform assignment on a constant class attribute");
                   ^
ph7.c:7258:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,
                    ^
ph7.c:7263:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pObj = VmExtractMemObj(&(*pVm),&sName,FALSE,TRUE);
                          ^
ph7.c:7265:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                  ^
ph7.c:7275:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"$GLOBALS is a read-only array and therefore cannot be referenced");
                    ^
ph7.c:7285:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Referenced variable name '%z' already exists",&sName);
                  ^
ph7.c:7293:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     PH7_VmRefObjInstall(&(*pVm),nIdx,SyHashLastEntry(&pFrame->hVar),0,0);
                         ^
ph7.c:7317:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmFrameLink(&(*pVm),&sName);
                ^
ph7.c:7335:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmEnterFrame(&(*pVm),0,0,&pFrame);
                   ^
ph7.c:7337:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Fatal PH7 engine is runnig out of memory");
                ^
ph7.c:7367:15: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmLeaveFrame(&(*pVm));
              ^
ph7.c:7394:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pException = PH7_VmExtractClass(&(*pVm),"Exception",sizeof("Exception")-1,TRUE,0);
                                  ^
ph7.c:7397:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   rc = VmUncaughtException(&(*pVm),pThis);
                            ^
ph7.c:7404:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   rc = VmThrowException(&(*pVm),pThis);
                         ^
ph7.c:7412:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmUncaughtException(&(*pVm),0);
                      ^
ph7.c:7465:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_WARNING,"Invalid argument supplied for the foreach statement,expecting array or class instance");
                    ^
ph7.c:7472:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"PH7 is running out of memory while preparing the 'foreach' step");
                    ^
ph7.c:7499:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"PH7 is running out of memory while preparing the 'foreach' step");
                    ^
ph7.c:7545:39: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    ph7_value *pKey = VmExtractMemObj(&(*pVm),&pInfo->sKey,FALSE,TRUE);
                                      ^
ph7.c:7562:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    pValue = VmExtractMemObj(&(*pVm),&pInfo->sValue,FALSE,TRUE);
                             ^
ph7.c:7576:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   if( VmClassMemberAccess(&(*pVm),pThis->pClass,&pVmAttr->pAttr->sName,
                           ^
ph7.c:7596:39: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    ph7_value *pKey = VmExtractMemObj(&(*pVm),&pInfo->sKey,FALSE,TRUE);
                                      ^
ph7.c:7617:31: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     pValue = VmExtractMemObj(&(*pVm),&pInfo->sValue,FALSE,TRUE);
                              ^
ph7.c:7658:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Undefined class method '%z->%z',PH7 is loading NULL",
                   ^
ph7.c:7662:39: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     PH7_ClassInstanceCallMagicMethod(&(*pVm),pClass,pThis,"__call",sizeof("__call")-1,&sName);
                                      ^
ph7.c:7687:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Undefined class attribute '%z->%z',PH7 is loading NULL",
                   ^
ph7.c:7690:39: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     PH7_ClassInstanceCallMagicMethod(&(*pVm),pClass,pThis,"__get",sizeof("__get")-1,&sName);
                                      ^
ph7.c:7703:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     if( VmClassMemberAccess(&(*pVm),pClass,&pObjAttr->pAttr->sName,pObjAttr->pAttr->iProtection,TRUE) ){
                             ^
ph7.c:7729:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_ERR,"'->': Expecting class instance as left operand,PH7 is loading NULL");
                 ^
ph7.c:7760:34: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     pClass = PH7_VmExtractClass(&(*pVm),(const char *)SyBlobData(&pNos->sBlob),
                                 ^
ph7.c:7766:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Call to undefined class '%.*s',PH7 is loading NULL",
                  ^
ph7.c:7784:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Cannot call abstract method '%z:%z',PH7 is loading NULL",
                     ^
ph7.c:7788:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Undefined class static method '%z::%z',PH7 is loading NULL",
                     ^
ph7.c:7792:41: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       PH7_ClassInstanceCallMagicMethod(&(*pVm),pClass,0,"__callStatic",sizeof("__callStatic")-1,&sName);
                                        ^
ph7.c:7815:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Undefined class attribute '%z::%z',PH7 is loading NULL",
                    ^
ph7.c:7818:40: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      PH7_ClassInstanceCallMagicMethod(&(*pVm),pClass,0,"__get",sizeof("__get")-1,&sName);
                                       ^
ph7.c:7829:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Access to a non-static class attribute '%z::%z',PH7 is loading NULL",
                     ^
ph7.c:7835:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       if( VmClassMemberAccess(&(*pVm),pClass,&pAttr->sName,pAttr->iProtection,TRUE) ){
                               ^
ph7.c:7856:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,"Invalid class name,PH7 is loading NULL");
                    ^
ph7.c:7876:31: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pClass = PH7_VmExtractClass(&(*pVm),(const char *)SyBlobData(&pTos->sBlob),
                              ^
ph7.c:7884:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,"Class '%.*s' is not defined,PH7 is loading NULL",
                ^
ph7.c:7895:31: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pNew = PH7_NewClassInstance(&(*pVm),pClass);
                              ^
ph7.c:7897:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                 ^
ph7.c:7931:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmErrorFormat(&(*pVm),PH7_CTX_NOTICE,"Missing constructor argument %u($%z) for class '%z'",
                     ^
ph7.c:7938:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmCallClassMethod(&(*pVm),pNew,pCons,0,(int)SySetUsed(&aArg),(ph7_value **)SySetBasePtr(&aArg));
                         ^
ph7.c:7967:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,
                   ^
ph7.c:7978:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,
                   ^
ph7.c:8067:38: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    PH7_ClassInstanceCallMagicMethod(&(*pVm),pThis->pClass,pThis,"__invoke",sizeof("__invoke")-1,0);
                                     ^
ph7.c:8070:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    VmErrorFormat(&(*pVm),PH7_CTX_WARNING,"Invalid function name,NULL will be returned");
                  ^
ph7.c:8113:34: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      pSelf = PH7_VmExtractClass(&(*pVm),(const char *)SyBlobData(&pTarget->sBlob),
                                 ^
ph7.c:8150:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      if( !VmClassMemberAccess(&(*pVm),pSelf,&pVmFunc->sName,pMeth->iProtection,TRUE) ){
                               ^
ph7.c:8165:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                 ^
ph7.c:8178:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pVmFunc = VmOverload(&(*pVm),pVmFunc,pArg,(int)(pTos-pArg));
                        ^
ph7.c:8183:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmEnterFrame(&(*pVm),pVmFunc,pThis,&pFrame);
                    ^
ph7.c:8186:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                 ^
ph7.c:8200:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pObj = VmExtractMemObj(&(*pVm),&sThis,FALSE,TRUE);
                          ^
ph7.c:8215:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     pObj = VmReserveMemObj(&(*pVm),&pStatic->nIdx);
                            ^
ph7.c:8218:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      PH7_MemObjInit(&(*pVm),pObj);
                     ^
ph7.c:8221:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmLocalExec(&(*pVm),&pStatic->aByteCode,pObj);
                   ^
ph7.c:8239:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     rc = VmLocalExec(&(*pVm),&aFormalArg[n].aByteCode,pArg);
                      ^
ph7.c:8251:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      pClass = PH7_VmExtractClass(&(*pVm),pName->zString,pName->nByte,TRUE,0);
                                  ^
ph7.c:8255:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
         VmErrorFormat(&(*pVm),PH7_CTX_WARNING,
                       ^
ph7.c:8264:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
         VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                       ^
ph7.c:8282:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmErrorFormat(&(*pVm),PH7_CTX_WARNING,
                     ^
ph7.c:8287:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
      pObj = VmExtractMemObj(&(*pVm),&aFormalArg[n].sName,FALSE,TRUE);
                             ^
ph7.c:8303:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     pObj = VmExtractMemObj(&(*pVm),&aFormalArg[n].sName,FALSE,TRUE);
                            ^
ph7.c:8312:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    pObj = VmExtractMemObj(&(*pVm),&sName,TRUE,TRUE);
                           ^
ph7.c:8350:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    pObj = VmExtractMemObj(&(*pVm),&aFormalArg[n].sName,FALSE,TRUE);
                           ^
ph7.c:8353:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     rc = VmLocalExec(&(*pVm),&aFormalArg[n].aByteCode,pObj);
                      ^
ph7.c:8377:35: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pFrameStack = VmNewOperandStack(&(*pVm),SySetUsed(&pVmFunc->aByteCode));
                                  ^
ph7.c:8380:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_ERR,"PH7 is running out of memory while calling function '%z',NULL will be returned",
                 ^
ph7.c:8394:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(&pVmFunc->aByteCode),pFrameStack,-1,pTos,&n,FALSE);
                      ^
ph7.c:8412:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmErrorFormat(&(*pVm),PH7_CTX_NOTICE,
                     ^
ph7.c:8422:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     VmErrorFormat(&(*pVm),PH7_CTX_NOTICE,
                   ^
ph7.c:8451:16: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmLeaveFrame(&(*pVm));
               ^
ph7.c:8466:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmErrorFormat(&(*pVm),PH7_CTX_WARNING,"Call to undefined function '%z',NULL will be returned",&sName);
                 ^
ph7.c:8483:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_MemObjInit(&(*pVm),&sRet);
                 ^
ph7.c:8485:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmInitCallContext(&sCtx,&(*pVm),pFunc,&sRet,0);
                          ^
ph7.c:8570:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pStack = VmNewOperandStack(&(*pVm),SySetUsed(pByteCode));
                            ^
ph7.c:8575:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pByteCode),pStack,-1,&(*pResult),0,FALSE);
                     ^
ph7.c:8575:75: style: Redundant pointer operation on 'pResult' - it's already a pointer. [redundantPointerOp]
 rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pByteCode),pStack,-1,&(*pResult),0,FALSE);
                                                                          ^
ph7.c:8612:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmCallUserFunction(&(*pVm),&pEntry->sCallback,pEntry->nArg,apArg,0);
                          ^
ph7.c:8642:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pVm->pByteContainer),pVm->aOps,-1,&pVm->sExec,0,FALSE);
                ^
ph7.c:8644:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmInvokeShutdownCallbacks(&(*pVm));
                           ^
ph7.c:9806:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                ^
ph7.c:10114:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 aStack = VmNewOperandStack(&(*pVm),2/* Method name + Aux data */+nArg);
                            ^
ph7.c:10116:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,
                   ^
ph7.c:10156:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmByteCodeExec(&(*pVm),aInstr,aStack,iCursor,pResult,0,TRUE);
                ^
ph7.c:10206:37: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pClass = VmExtractClassFromValue(&(*pVm),pValue);
                                    ^
ph7.c:10235:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = PH7_VmCallClassMethod(&(*pVm),pThis,pMethod,pResult,nArg,apArg);
                             ^
ph7.c:10239:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 aStack = VmNewOperandStack(&(*pVm),1+nArg);
                            ^
ph7.c:10241:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmThrowError(&(*pVm),0,PH7_CTX_ERR,
                   ^
ph7.c:10272:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 VmByteCodeExec(&(*pVm),aInstr,aStack,nArg,pResult,0,TRUE);
                ^
ph7.c:10306:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmCallUserFunction(&(*pVm),pFunc,(int)SySetUsed(&aArg),(ph7_value **)SySetBasePtr(&aArg),pResult);
                             ^
ph7.c:10899:15: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmObRestore(&(*pVm),pEntry);
              ^
ph7.c:11419:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pRef = VmRefObjExtract(&(*pVm),nObjIdx);
                        ^
ph7.c:11423:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmRefObjUnlink(&(*pVm),pRef);
                 ^
ph7.c:11461:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
    PH7_VmUnsetMemObj(&(*pVm),nIdx,FALSE);
                      ^
ph7.c:12352:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmCallUserFunction(&(*pVm),&pVm->aExceptionCB[1],1,apArg,0);
                             ^
ph7.c:12377:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmErrorFormat(&(*pVm),PH7_CTX_ERR,
                ^
ph7.c:12412:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pClass = PH7_VmExtractClass(&(*pVm),pName->zString,pName->nByte,TRUE,0);
                               ^
ph7.c:12427:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmUncaughtException(&(*pVm),pThis);
                           ^
ph7.c:12452:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = VmEnterFrame(&(*pVm),0,0,&pFrame);
                    ^
ph7.c:12455:38: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   ph7_value *pObj = VmExtractMemObj(&(*pVm),&pCatch->sThis,FALSE,TRUE);
                                     ^
ph7.c:12464:16: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmLocalExec(&(*pVm),&pCatch->sByteCode,0);
               ^
ph7.c:12466:17: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmLeaveFrame(&(*pVm));
                ^
ph7.c:13358:24: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 VmEvalChunk(pCtx->pVm,&(*pCtx),&sChunk,PH7_PHP_ONLY,FALSE);
                       ^
ph7.c:13418:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  if( VmIsIncludedFile(&(*pVm),&sPath) ){
                       ^
ph7.c:13484:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
   VmEvalChunk(pCtx->pVm,&(*pCtx),&sScript,0,TRUE);
                         ^
ph7.c:13633:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 rc = VmExecIncludedFile(&(*pCtx),&sFile,FALSE);
                         ^
ph7.c:13667:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 rc = VmExecIncludedFile(&(*pCtx),&sFile,TRUE);
                         ^
ph7.c:13705:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 rc = VmExecIncludedFile(&(*pCtx),&sFile,FALSE);
                         ^
ph7.c:13739:26: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 rc = VmExecIncludedFile(&(*pCtx),&sFile,TRUE);
                         ^
ph7.c:14955:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_MemObjInit(&(*pVm),pValue);
                 ^
ph7.c:14996:30: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 pEngine = VmCreateXMLEngine(&(*pCtx),0,':');
                             ^
ph7.c:15031:30: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 pEngine = VmCreateXMLEngine(&(*pCtx),TRUE,ns_sep);
                             ^
ph7.c:15857:29: style: Redundant pointer operation on 'pText' - it's already a pointer. [redundantPointerOp]
 pData = VmXMLValue(pEngine,&(*pText),0);
                            ^
ph7.c:15893:31: style: Redundant pointer operation on 'pTargetStr' - it's already a pointer. [redundantPointerOp]
 pTarget = VmXMLValue(pEngine,&(*pTargetStr),0);
                              ^
ph7.c:15894:29: style: Redundant pointer operation on 'pDataStr' - it's already a pointer. [redundantPointerOp]
 pData = VmXMLValue(pEngine,&(*pDataStr),0);
                            ^
ph7.c:16544:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = ph7_create_function(&(*pVm),aVmFunc[n].zName,aVmFunc[n].xFunc,&(*pVm));
                           ^
ph7.c:16791:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pRef = VmRefObjExtract(&(*pVm),nIdx);
                        ^
ph7.c:16794:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pRef = VmNewRefObj(&(*pVm),nIdx);
                     ^
ph7.c:16800:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  VmRefObjInsert(&(*pVm),pRef);
                 ^
ph7.c:16846:25: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pRef = VmRefObjExtract(&(*pVm),nIdx);
                        ^
ph7.c:17312:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pGet = VmExtractSuper(&(*pVm),"_POST",sizeof("_POST")-1);
                         ^
ph7.c:17315:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pGet = VmExtractSuper(&(*pVm),"_GET",sizeof("_GET")-1);
                         ^
ph7.c:17317:29: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pRequest = VmExtractSuper(&(*pVm),"_REQUEST",sizeof("_REQUEST")-1);
                            ^
ph7.c:17411:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pCookie = VmExtractSuper(&(*pVm),"_COOKIE",sizeof("_COOKIE")-1);
                           ^
ph7.c:17520:28: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   VmHttpSplitEncodedQuery(&(*pVm),pValue,&sWorker,FALSE);
                           ^
ph7.c:17650:33: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pHeaderArray = VmExtractSuper(&(*pVm),"_HEADER",sizeof("_HEADER")-1);
                                ^
ph7.c:17667:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
     VmHttpPorcessCookie(&(*pVm),&sWorker,pValue->zString,pValue->nByte);
                         ^
ph7.c:17687:32: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
       VmHttpSplitEncodedQuery(&(*pVm),&sRequest,&sWorker,TRUE);
                               ^
ph7.c:25839:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  ph7_create_function(&(*pVm),aVfsFunc[n].zName,aVfsFunc[n].xFunc,(void *)pVm->pEngine->pVfs);
                      ^
ph7.c:25842:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  ph7_create_function(&(*pVm),aIOFunc[n].zName,aIOFunc[n].xFunc,pVm);
                      ^
ph7.c:26358:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,apNode[i]->pStart->nLine,"Syntax error: Unexpected token ')'");
                             ^
ph7.c:26369:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,apNode[i]->pStart->nLine,"Syntax error: Unexpected token ']'");
                             ^
ph7.c:26425:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,apNode[i]->pStart->nLine,"Syntax error: Unexpected token '}'");
                             ^
ph7.c:26434:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,apNode[i]->pStart->nLine,"Syntax error: Unexpected token ':'");
                             ^
ph7.c:26468:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,apNode[0]->pStart->nLine,"Syntax error,mismatched '(','[','{' or '?'");
                           ^
ph7.c:26546:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Missing opening parenthesis '(' while declaring annonymous function");
                           ^
ph7.c:26556:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Syntax error while declaring annonymous function");
                           ^
ph7.c:26570:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Syntax error while declaring annonymous function");
                             ^
ph7.c:26580:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Syntax error while declaring annonymous function");
                             ^
ph7.c:26589:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Syntax error while declaring annonymous function");
                            ^
ph7.c:26604:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Syntax error while declaring annonymous function,missing '{'");
                           ^
ph7.c:26720:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = ExprAssembleAnnon(&(*pGen),&pCur,pGen->pEnd);
                            ^
ph7.c:26798:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  ExprFreeTree(&(*pGen),pNode->pLeft);
               ^
ph7.c:26802:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  ExprFreeTree(&(*pGen),pNode->pRight);
               ^
ph7.c:26806:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  ExprFreeTree(&(*pGen),pNode->pCond);
               ^
ph7.c:26814:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen),apArg[n]);
                ^
ph7.c:26832:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen),apNode[n]);
                ^
ph7.c:26904:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     PH7_GenCompileError(&(*pGen),E_WARNING,apNode[iNode]->pStart->nLine,
                         ^
ph7.c:26906:19: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     ExprFreeTree(&(*pGen),apNode[iNode]);
                  ^
ph7.c:26909:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprMakeTree(&(*pGen),&apNode[iNode],iCur-iNode);
                ^
ph7.c:26915:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pOp->pStart->nLine,"Empty function argument");
                             ^
ph7.c:26922:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pOp->pStart->nLine,"Missing function argument");
                            ^
ph7.c:26933:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pOp->pStart->nLine,"Missing function argument");
                             ^
ph7.c:26988:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = ExprMakeTree(&(*pGen),&apNode[iLeft + 1],iCur - iLeft - 1);
                      ^
ph7.c:26994:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen),apNode[iLeft]);
                ^
ph7.c:26995:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen),apNode[iCur]);
                ^
ph7.c:27029:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = ExprMakeTree(&(*pGen),&apNode[iLeft + 1],iCur - iLeft - 1);
                      ^
ph7.c:27035:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen),apNode[iLeft]);
                ^
ph7.c:27036:17: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   ExprFreeTree(&(*pGen),apNode[iCur]);
                ^
ph7.c:27083:37: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprProcessFuncArguments(&(*pGen),pNode,&apNode[iCur+1],nFuncTok-1);
                                    ^
ph7.c:27126:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprMakeTree(&(*pGen),&apNode[iCur+1],iArrTok - iCur - 1);
                        ^
ph7.c:27412:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprMakeTree(&(*pGen),&apNode[iCur + 1],iRight - iCur - 1);
                        ^
ph7.c:27428:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = ExprMakeTree(&(*pGen),&apNode[iRight + 1],nToken - iRight - 1);
                        ^
ph7.c:27553:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = ExprExtractNode(&(*pGen),&pNode);
                       ^
ph7.c:27567:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = ExprVerifyNodes(&(*pGen),apNode,(sxi32)SySetUsed(pExprNode));
                      ^
ph7.c:27576:20: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = ExprMakeTree(&(*pGen),apNode,(sxi32)SySetUsed(pExprNode));
                   ^
ph7.c:27705:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  PH7_VmRandomString(&(*pVm),zSalt,sizeof(zSalt));
                     ^
ph7.c:27728:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_VmInitFuncState(&(*pVm),&pMeth->sFunc,&zName[sizeof(char)*4/*[__@*/+SyStringLength(&pClass->sName)],
                     ^
ph7.c:27849:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     PH7_GenCompileError(&(*pGen),E_WARNING,((ph7_class_attr *)pEntry->pUserData)->nLine,
                         ^
ph7.c:27872:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,((ph7_class_method *)pEntry->pUserData)->nLine,
                             ^
ph7.c:27883:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    PH7_GenCompileError(&(*pGen),E_WARNING,pMeth->nLine,
                        ^
ph7.c:28103:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pNew = NewClassInstance(&(*pVm),&(*pClass));
                         ^
ph7.c:28103:34: style: Redundant pointer operation on 'pClass' - it's already a pointer. [redundantPointerOp]
 pNew = NewClassInstance(&(*pVm),&(*pClass));
                                 ^
ph7.c:28108:38: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmCreateClassInstanceFrame(&(*pVm),pNew);
                                     ^
ph7.c:28314:28: style: Redundant pointer operation on 'pThis' - it's already a pointer. [redundantPointerOp]
  PH7_ClassInstanceRelease(&(*pThis));
                           ^
ph7.c:28476:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),zInfinite,sizeof(zInfinite)-1);
               ^
ph7.c:28478:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),")",sizeof(char));
                ^
ph7.c:28484:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),"Object(",sizeof("Object(")-1);
               ^
ph7.c:28487:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobFormat(&(*pOut),"%z) {",&pThis->pClass->sName);
              ^
ph7.c:28491:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut),"\n",sizeof(char));
              ^
ph7.c:28500:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobAppend(&(*pOut)," ",sizeof(char));
                 ^
ph7.c:28504:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobFormat(&(*pOut),"['%z'] =>",&pVmAttr->pAttr->sName);
                 ^
ph7.c:28508:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobAppend(&(*pOut),"\n",sizeof(char));
                 ^
ph7.c:28510:25: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    rc = PH7_MemObjDump(&(*pOut),pValue,ShowType,nTab+1,nDepth,0);
                        ^
ph7.c:28518:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut)," ",sizeof(char));
               ^
ph7.c:28520:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut),"}",sizeof(char));
              ^
ph7.c:28579:33: style: Redundant pointer operation on 'pClass' - it's already a pointer. [redundantPointerOp]
 pMeth = PH7_ClassExtractMethod(&(*pClass),zMethod,nByte);
                                ^
ph7.c:28593:33: style: Redundant pointer operation on 'pThis' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmCallClassMethod(pVm,&(*pThis),pMeth,0,nArg,apArg);
                                ^
ph7.c:28873:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_VmCallClassMethod(&(*pVm),&(*pThis),pMethod,&(*pResult),0,0);
                       ^
ph7.c:28873:32: style: Redundant pointer operation on 'pThis' - it's already a pointer. [redundantPointerOp]
 PH7_VmCallClassMethod(&(*pVm),&(*pThis),pMethod,&(*pResult),0,0);
                               ^
ph7.c:28873:50: style: Redundant pointer operation on 'pResult' - it's already a pointer. [redundantPointerOp]
 PH7_VmCallClassMethod(&(*pVm),&(*pThis),pMethod,&(*pResult),0,0);
                                                 ^
ph7.c:28891:26: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  return MemObjRealToInt(&(*pObj));
                         ^
ph7.c:28895:28: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  return MemObjStringToInt(&(*pObj));
                           ^
ph7.c:29000:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobFormat(&(*pOut),"%.15g",pObj->rVal);
               ^
ph7.c:29002:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobFormat(&(*pOut),"%qd",pObj->x.iVal);
               ^
ph7.c:29006:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),"TRUE",sizeof("TRUE")-1);
                ^
ph7.c:29009:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobAppend(&(*pOut),"FALSE",sizeof("FALSE")-1);
                 ^
ph7.c:29013:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),"Array",sizeof("Array")-1);
               ^
ph7.c:29027:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),"Object",sizeof("Object")-1);
                ^
ph7.c:29032:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobFormat(&(*pOut),"ResourceID_%#x",pObj->x.pOther);
               ^
ph7.c:29114:33: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
 pObj->x.iVal = MemObjRealToInt(&(*pObj));
                                ^
ph7.c:29140:33: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  pObj->x.iVal = MemObjIntValue(&(*pObj));
                                ^
ph7.c:29155:32: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  pObj->rVal = MemObjRealValue(&(*pObj));
                               ^
ph7.c:29160:19: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  MemObjTryIntger(&(*pObj));
                  ^
ph7.c:29171:37: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  pObj->x.iVal = MemObjBooleanValue(&(*pObj));
                                    ^
ph7.c:29187:39: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  rc = MemObjStringValue(&pObj->sBlob,&(*pObj),TRUE);
                                      ^
ph7.c:29228:58: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
    PH7_HashmapInsert(pMap,0/* Automatic index assign */,&(*pObj));
                                                         ^
ph7.c:29427:21: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
   PH7_MemObjToReal(&(*pObj));
                    ^
ph7.c:29434:38: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
    pObj->x.iVal = MemObjStringToInt(&(*pObj));
                                     ^
ph7.c:29443:20: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  PH7_MemObjToReal(&(*pObj));
                   ^
ph7.c:29455:19: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
  MemObjTryIntger(&(*pObj));
                  ^
ph7.c:29611:25: style: Redundant pointer operation on 'pSrc' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc),&(*pDest),sizeof(ph7_value)-(sizeof(ph7_vm *)+sizeof(SyBlob)+sizeof(sxu32)));
                        ^
ph7.c:29611:34: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc),&(*pDest),sizeof(ph7_value)-(sizeof(ph7_vm *)+sizeof(SyBlob)+sizeof(sxu32)));
                                 ^
ph7.c:29635:25: style: Redundant pointer operation on 'pSrc' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc),&(*pDest),
                        ^
ph7.c:29635:34: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
 SyMemcpy((const void *)&(*pSrc),&(*pDest),
                                 ^
ph7.c:29888:21: style: Redundant pointer operation on 'pObj1' - it's already a pointer. [redundantPointerOp]
    MemObjTryIntger(&(*pObj1));
                    ^
ph7.c:29995:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut)," ",sizeof(char));
               ^
ph7.c:29999:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),"&",sizeof(char));
                ^
ph7.c:30003:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),zType,SyStrlen(zType));
               ^
ph7.c:30007:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),"(",sizeof(char));
                ^
ph7.c:30011:25: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   rc = PH7_HashmapDump(&(*pOut),(ph7_hashmap *)pObj->x.pOther,ShowType,nTab+1,nDepth+1);
                        ^
ph7.c:30014:31: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   rc = PH7_ClassInstanceDump(&(*pOut),(ph7_class_instance *)pObj->x.pOther,ShowType,nTab+1,nDepth+1);
                              ^
ph7.c:30019:23: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    MemObjStringValue(&(*pOut),&(*pObj),FALSE);
                      ^
ph7.c:30019:32: style: Redundant pointer operation on 'pObj' - it's already a pointer. [redundantPointerOp]
    MemObjStringValue(&(*pOut),&(*pObj),FALSE);
                               ^
ph7.c:30023:19: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
     SyBlobFormat(&(*pOut),"%u '",SyBlobLength(&pObj->sBlob));
                  ^
ph7.c:30026:19: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
     SyBlobAppend(&(*pOut),SyBlobData(pContents),SyBlobLength(pContents));
                  ^
ph7.c:30029:19: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
     SyBlobAppend(&(*pOut),"'",sizeof(char));
                  ^
ph7.c:30035:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
    SyBlobAppend(&(*pOut),")",sizeof(char));
                 ^
ph7.c:30042:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut),"\n",sizeof(char));
              ^
ph7.c:30599:27: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pChunk = MemBackendAlloc(&(*pBackend),nByte);
                          ^
ph7.c:30611:26: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  return MemBackendAlloc(&(*pBackend),nByte);
                         ^
ph7.c:30659:29: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pChunk = MemBackendRealloc(&(*pBackend),pOld,nByte);
                            ^
ph7.c:30701:22: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 rc = MemBackendFree(&(*pBackend),pChunk);
                     ^
ph7.c:30755:36: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 zBucket = (char *)MemBackendAlloc(&(*pBackend),SXMEM_POOL_MAXALLOC);
                                   ^
ph7.c:30784:44: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  pBucket = (SyMemHeader *)MemBackendAlloc(&(*pBackend),nByte+sizeof(SyMemHeader));
                                           ^
ph7.c:30802:27: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  rc = MemPoolBucketAlloc(&(*pBackend),nBucket);
                          ^
ph7.c:30826:31: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pChunk = MemBackendPoolAlloc(&(*pBackend),nByte);
                              ^
ph7.c:30845:18: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
  MemBackendFree(&(*pBackend),pHeader);
                 ^
ph7.c:30864:26: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 rc = MemBackendPoolFree(&(*pBackend),pChunk);
                         ^
ph7.c:30935:9: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 SyZero(&(*pBackend),sizeof(SyMemBackend));
        ^
ph7.c:30963:9: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 SyZero(&(*pBackend),sizeof(SyMemBackend));
        ^
ph7.c:30988:9: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 SyZero(&(*pBackend),sizeof(SyMemBackend));
        ^
ph7.c:31066:25: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 rc = MemBackendRelease(&(*pBackend));
                        ^
ph7.c:31081:27: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 pNew = SyMemBackendAlloc(&(*pBackend),nSize);
                          ^
ph7.c:31090:36: style: Redundant pointer operation on 'pBackend' - it's already a pointer. [redundantPointerOp]
 zDest = (char *)SyMemBackendAlloc(&(*pBackend),nSize + 1);
                                   ^
ph7.c:31119:22: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 pBlob->pAllocator = &(*pAllocator);
                     ^
ph7.c:31192:23: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 rc = BlobPrepareGrow(&(*pBlob),&nSize);
                      ^
ph7.c:31209:20: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 rc = SyBlobAppend(&(*pBlob),(const void *)"\0",sizeof(char));
                   ^
ph7.c:31224:21: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
  rc = SyBlobAppend(&(*pDest),pSrc->pBlob,pSrc->nByte);
                    ^
ph7.c:31446:47: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 apNew = (SyHashEntry_Pr **)SyMemBackendAlloc(&(*pAllocator),sizeof(SyHashEntry_Pr *) * SXHASH_BUCKET_SIZE);
                                              ^
ph7.c:31451:22: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 pHash->pAllocator = &(*pAllocator);
                     ^
ph7.c:31518:24: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 pEntry = HashGetEntry(&(*pHash),pKey,nKeyLen);
                       ^
ph7.c:31554:24: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 pEntry = HashGetEntry(&(*pHash),pKey,nKeyLen);
                       ^
ph7.c:31558:23: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 rc = HashDeleteEntry(&(*pHash),pEntry,ppUserData);
                      ^
ph7.c:31684:22: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
  rc = HashGrowTable(&(*pHash));
                     ^
ph7.c:31702:18: style: Redundant pointer operation on 'pHash' - it's already a pointer. [redundantPointerOp]
 rc = HashInsert(&(*pHash),pEntry);
                 ^
ph7.c:33207:30: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 FormatMount(SXFMT_CONS_BLOB,&(*pBlob),0,0,&n,zFormat,ap);
                             ^
ph7.c:33219:30: style: Redundant pointer operation on 'pBlob' - it's already a pointer. [redundantPointerOp]
 FormatMount(SXFMT_CONS_BLOB,&(*pBlob),0,0,&n,zFormat,ap);
                             ^
ph7.c:34009:40: style: Redundant pointer operation on 'pTokenSet' - it's already a pointer. [redundantPointerOp]
 while( SXRET_OK == (SySetGetNextEntry(&(*pTokenSet),(void **)&pToken)) ){
                                       ^
ph7.c:34287:19: style: Redundant pointer operation on 'pParser' - it's already a pointer. [redundantPointerOp]
  rc = ProcessXML(&(*pParser),&sTagStack,&sWorker);
                  ^
ph7.c:34515:24: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  ArchiveHashGrowTable(&(*pArch));
                       ^
ph7.c:34673:33: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = GetCentralDirectoryEntry(&(*pArch),pEntry,&zCentral[nOfft],&nIncr);
                                ^
ph7.c:34705:28: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = ArchiveHashGetEntry(&(*pArch),pName->zString,pName->nByte,&pDup);
                           ^
ph7.c:34745:35: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = ParseEndOfCentralDirectory(&(*pArch),zEnd);
                                  ^
ph7.c:34764:19: style: Redundant pointer operation on 'pArch' - it's already a pointer. [redundantPointerOp]
  rc = ZipExtract(&(*pArch),zCentral,(sxu32)(zEnd - zCentral),(void *)zBuf);
                  ^
ph7.c:34786:48: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
 apHash = (SyArchiveEntry **)SyMemBackendAlloc(&(*pAllocator),SXARCHIVE_HASH_SIZE * sizeof(SyArchiveEntry *));
                                               ^
ph7.c:34795:23: style: Redundant pointer operation on 'pAllocator' - it's already a pointer. [redundantPointerOp]
  pArch->pAllocator = &(*pAllocator);
                      ^
ph7.c:36065:31: style: Redundant pointer operation on 'pStream' - it's already a pointer. [redundantPointerOp]
       rc = LexExtractHeredoc(&(*pStream),&(*pToken));
                              ^
ph7.c:36065:43: style: Redundant pointer operation on 'pToken' - it's already a pointer. [redundantPointerOp]
       rc = LexExtractHeredoc(&(*pStream),&(*pToken));
                                          ^
ph7.c:36481:25: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 rc = SyLexInit(&sLexer,&(*pOut),TokenizePHP,0);
                        ^
ph7.c:36594:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  rc = SySetPut(&(*pOut),(const void *)&sToken);
                ^
ph7.c:36707:18: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   rc = SySetPut(&(*pOut),(const void *)&sToken);
                 ^
ph7.c:36833:17: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode->pMap  = &(*pMap);
                ^
ph7.c:36856:17: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode->pMap  = &(*pMap);
                ^
ph7.c:37018:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode = HashmapNewIntNode(&(*pMap),iKey,nHash,nIdx);
                           ^
ph7.c:37027:25: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapGrowBucket(&(*pMap));
                        ^
ph7.c:37033:18: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 HashmapNodeLink(&(*pMap),pNode,nHash & (pMap->nSize - 1));
                 ^
ph7.c:37067:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 pNode = HashmapNewBlobNode(&(*pMap),pKey,nKeyLen,nHash,nIdx);
                            ^
ph7.c:37076:25: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapGrowBucket(&(*pMap));
                        ^
ph7.c:37082:18: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 HashmapNodeLink(&(*pMap),pNode,nHash & (pMap->nSize - 1));
                 ^
ph7.c:37215:23: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
   PH7_MemObjToString(&(*pKey));
                      ^
ph7.c:37219:30: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
   rc = HashmapLookupBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),&pNode);
                             ^
ph7.c:37229:27: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapLookupIntKey(&(*pMap),pKey->x.iVal,&pNode);
                          ^
ph7.c:37258:23: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
   PH7_MemObjToString(&(*pKey));
                      ^
ph7.c:37267:40: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK == HashmapLookupBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),
                                       ^
ph7.c:37288:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),&(*pVal),0,FALSE);
                            ^
ph7.c:37288:90: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),&(*pVal),0,FALSE);
                                                                                         ^
ph7.c:37297:39: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK == HashmapLookupIntKey(&(*pMap),pKey->x.iVal,&pNode) ){
                                      ^
ph7.c:37317:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pKey->x.iVal,&(*pVal),0,FALSE);
                           ^
ph7.c:37317:50: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pKey->x.iVal,&(*pVal),0,FALSE);
                                                 ^
ph7.c:37323:44: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
    while( SXRET_OK == HashmapLookupIntKey(&(*pMap),pMap->iNextIdx,0) ){
                                           ^
ph7.c:37335:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pMap->iNextIdx,&(*pVal),0,FALSE);
                           ^
ph7.c:37335:52: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pMap->iNextIdx,&(*pVal),0,FALSE);
                                                   ^
ph7.c:37381:23: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
   PH7_MemObjToString(&(*pKey));
                      ^
ph7.c:37390:40: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK == HashmapLookupBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),
                                       ^
ph7.c:37400:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),0,nRefIdx,TRUE);
                            ^
ph7.c:37409:39: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK == HashmapLookupIntKey(&(*pMap),pKey->x.iVal,&pNode) ){
                                      ^
ph7.c:37418:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pKey->x.iVal,0,nRefIdx,TRUE);
                           ^
ph7.c:37424:44: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
    while( SXRET_OK == HashmapLookupIntKey(&(*pMap),pMap->iNextIdx,0) ){
                                           ^
ph7.c:37431:28: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertIntKey(&(*pMap),pMap->iNextIdx,0,nRefIdx,TRUE);
                           ^
ph7.c:37459:33: style: Redundant pointer operation on 'pNode' - it's already a pointer. [redundantPointerOp]
 pObj = HashmapExtractNodeValue(&(*pNode));
                                ^
ph7.c:37468:23: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsert(&(*pMap),0,pObj);
                      ^
ph7.c:37470:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsertIntKey(&(*pMap),pNode->xKey.iKey,pObj,0,FALSE);
                            ^
ph7.c:37474:29: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pNode->xKey.sKey),
                            ^
ph7.c:37742:29: style: Redundant pointer operation on 'pRight' - it's already a pointer. [redundantPointerOp]
   rc = HashmapLookupIntKey(&(*pRight),pLe->xKey.iKey,&pRe);
                            ^
ph7.c:37746:30: style: Redundant pointer operation on 'pRight' - it's already a pointer. [redundantPointerOp]
   rc = HashmapLookupBlobKey(&(*pRight),SyBlobData(pKey),SyBlobLength(pKey),&pRe);
                             ^
ph7.c:37807:27: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = PH7_HashmapInsert(&(*pDest),&sKey,pVal);
                          ^
ph7.c:37810:23: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsert(&(*pDest),0/* Automatic index assign */,pVal);
                      ^
ph7.c:37860:26: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
  rc = PH7_HashmapInsert(&(*pDest),&sKey,pVal);
                         ^
ph7.c:37896:27: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = PH7_HashmapInsert(&(*pDest),&sKey,pVal);
                          ^
ph7.c:37900:29: style: Redundant pointer operation on 'pDest' - it's already a pointer. [redundantPointerOp]
   rc = HashmapInsertIntKey(&(*pDest),pEntry->xKey.iKey,pVal,0,FALSE);
                            ^
ph7.c:37966:26: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
    HashmapLookupBlobKey(&(*pLeft),SyBlobData(&pEntry->xKey.sKey),SyBlobLength(&pEntry->xKey.sKey),0) ){
                         ^
ph7.c:37970:33: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
      rc = HashmapInsertBlobKey(&(*pLeft),SyBlobData(&pEntry->xKey.sKey),SyBlobLength(&pEntry->xKey.sKey),
                                ^
ph7.c:37979:40: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
   if( SXRET_OK != HashmapLookupIntKey(&(*pLeft),pEntry->xKey.iKey,0) ){
                                       ^
ph7.c:37983:31: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
     rc = HashmapInsertIntKey(&(*pLeft),pEntry->xKey.iKey,pObj,0,FALSE);
                              ^
ph7.c:38014:14: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap->pVm = &(*pVm);
             ^
ph7.c:38061:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap = PH7_NewHashmap(&(*pVm),0,0);
                       ^
ph7.c:38067:27: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pObj = PH7_ReserveMemObj(&(*pVm));
                          ^
ph7.c:38071:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_MemObjInitFromArray(&(*pVm),pObj,pMap);
                         ^
ph7.c:38083:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  pSuper = ph7_new_array(&(*pVm));
                         ^
ph7.c:38088:22: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  rc = ph7_vm_config(&(*pVm),PH7_VM_CONFIG_CREATE_SUPER,azSuper[n]/* Super-global name*/,pSuper/* Super-global value */);
                     ^
ph7.c:38093:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  ph7_release_value(&(*pVm),pSuper);
                    ^
ph7.c:38192:21: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapLookup(&(*pMap),&(*pKey),ppNode);
                    ^
ph7.c:38192:30: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = HashmapLookup(&(*pMap),&(*pKey),ppNode);
                             ^
ph7.c:38215:21: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                    ^
ph7.c:38215:30: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                             ^
ph7.c:38215:39: style: Redundant pointer operation on 'pVal' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsert(&(*pMap),&(*pKey),&(*pVal));
                                      ^
ph7.c:38259:26: style: Redundant pointer operation on 'pMap' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsertByRef(&(*pMap),&(*pKey),nRefIdx);
                         ^
ph7.c:38259:35: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = HashmapInsertByRef(&(*pMap),&(*pKey),nRefIdx);
                                  ^
ph7.c:39462:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx),(ph7_hashmap *)apArg[0]->x.pOther,0);
                     ^
ph7.c:39488:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx),(ph7_hashmap *)apArg[0]->x.pOther,1);
                     ^
ph7.c:39514:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx),(ph7_hashmap *)apArg[0]->x.pOther,-1);
                     ^
ph7.c:39544:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx),pMap,0);
                     ^
ph7.c:39574:22: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 HashmapCurrentValue(&(*pCtx),pMap,0);
                     ^
ph7.c:42383:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  ph7_create_function(&(*pVm),aHashmapFunc[n].zName,aHashmapFunc[n].xFunc,0);
                      ^
ph7.c:42405:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),zInfinite,sizeof(zInfinite)-1);
               ^
ph7.c:42407:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut),")",sizeof(char));
                ^
ph7.c:42415:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),"Array(",sizeof("Array(")-1);
               ^
ph7.c:42418:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobFormat(&(*pOut),"%u) {",pMap->nEntry);
              ^
ph7.c:42422:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut),"\n",sizeof(char));
              ^
ph7.c:42429:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobAppend(&(*pOut)," ",sizeof(char));
                ^
ph7.c:42433:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobFormat(&(*pOut),"[%qd] =>",pEntry->xKey.iKey);
                ^
ph7.c:42435:17: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   SyBlobFormat(&(*pOut),"[%.*s] =>",
                ^
ph7.c:42441:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut),"\n",sizeof(char));
               ^
ph7.c:42451:24: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
   rc = PH7_MemObjDump(&(*pOut),pObj,ShowType,nTab+1,nDepth,isRef);
                       ^
ph7.c:42461:16: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
  SyBlobAppend(&(*pOut)," ",sizeof(char));
               ^
ph7.c:42463:15: style: Redundant pointer operation on 'pOut' - it's already a pointer. [redundantPointerOp]
 SyBlobAppend(&(*pOut),"}",sizeof(char));
              ^
ph7.c:44592:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  ph7_create_constant(&(*pVm),aBuiltIn[n].zName,aBuiltIn[n].xExpand,&(*pVm));
                      ^
ph7.c:44800:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,1,"Fatal, PH7 engine is running out-of-memory");
                      ^
ph7.c:44806:20: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 GenStateInitBlock(&(*pGen),pBlock,iType,nFirstInstr,pUserData);
                   ^
ph7.c:44831:23: style: Redundant pointer operation on 'pBlock' - it's already a pointer. [redundantPointerOp]
 GenStateReleaseBlock(&(*pBlock));
                      ^
ph7.c:44852:21: style: Redundant pointer operation on 'pBlock' - it's already a pointer. [redundantPointerOp]
  GenStateFreeBlock(&(*pBlock));
                    ^
ph7.c:44938:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateGetLabel(&(*pGen),&pJump->sLabel,&pLabel);
                        ^
ph7.c:44941:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pJump->nLine,"Label '%z' was referenced but not defined",&pJump->sLabel);
                            ^
ph7.c:44949:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pJump->nLine,"Label '%z' is unreachable",&pJump->sLabel);
                            ^
ph7.c:44964:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_WARNING,aLabel[n].nLine,
                       ^
ph7.c:45005:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,1,"PH7 engine is running out of memory");
                      ^
ph7.c:45043:36: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  pObj = GenStateInstallNumLiteral(&(*pGen),&nIdx);
                                   ^
ph7.c:45055:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,1,"PH7 engine is running out of memory");
                       ^
ph7.c:45092:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 if( SXRET_OK == GenStateFindLiteral(&(*pGen),pStr,&nIdx) ){
                                     ^
ph7.c:45102:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,1,"PH7 engine is running out of memory");
                      ^
ph7.c:45176:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"PH7 engine is running out of memory");
                      ^
ph7.c:45231:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:45250:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"PH7 engine is running out of memory");
                      ^
ph7.c:45328:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    pObj = GenStateNewStrObj(&(*pGen),&iCons);
                             ^
ph7.c:45346:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    pObj = GenStateNewStrObj(&(*pGen),&iCons);
                             ^
ph7.c:45468:41: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateProcessStringExpression(&(*pGen),pGen->pIn->nLine,zExpr,zIn);
                                        ^
ph7.c:45552:41: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateProcessStringExpression(&(*pGen),pGen->pIn->nLine,zExpr,zIn);
                                        ^
ph7.c:45577:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileString(&(*pGen));
                            ^
ph7.c:45589:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileString(&(*pGen));
                            ^
ph7.c:45626:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),iFlags,xValidator);
                      ^
ph7.c:45647:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                            ^
ph7.c:45655:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                           ^
ph7.c:45720:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pCur->nLine,"array(): Missing entry value");
                             ^
ph7.c:45727:35: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileArrayEntry(&(*pGen),pKey,pCur,
                                  ^
ph7.c:45735:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_WARNING,pCur->nLine,"array(): Missing entry key");
                       ^
ph7.c:45752:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pCur->nLine,"array(): Missing referenced variable");
                             ^
ph7.c:45760:34: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCompileArrayEntry(&(*pGen),pCur,pGen->pIn,EXPR_FLAG_RDONLY_LOAD/*Do not create the variable if inexistant*/,xValidator);
                                 ^
ph7.c:45792:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                             ^
ph7.c:45800:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                           ^
ph7.c:45835:35: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileArrayEntry(&(*pGen),pGen->pIn,pNext,EXPR_FLAG_LOAD_IDX_STORE,GenStateListNodeValidator);
                                  ^
ph7.c:45895:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,1,"Fatal, PH7 engine is running out of memory");
                      ^
ph7.c:45908:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileFunc(&(*pGen),&sName,0,TRUE,&pAnnonFunc);
                          ^
ph7.c:45930:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_GenCompileError(&(*pGen),E_NOTICE,pGen->pIn->nLine,
                     ^
ph7.c:45966:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_CompileExpr(&(*pGen),EXPR_FLAG_RDONLY_LOAD/* Do not create variable if inexistant */,0);
                         ^
ph7.c:45990:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),EXPR_FLAG_RDONLY_LOAD/* Do not create variable if inexistant */,0);
                       ^
ph7.c:45996:39: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  if( SXRET_OK != GenStateFindLiteral(&(*pGen),pName,&nIdx) ){
                                      ^
ph7.c:46001:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    PH7_GenCompileError(&(*pGen),E_ERROR,1,"Fatal, PH7 engine is running out of memory");
                        ^
ph7.c:46007:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   GenStateInstallLiteral(&(*pGen),pObj,nIdx);
                          ^
ph7.c:46065:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Invalid variable name");
                       ^
ph7.c:46069:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:46073:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Missing variable name");
                       ^
ph7.c:46188:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 if( SXRET_OK != GenStateFindLiteral(&(*pGen),&pToken->sData,&nIdx) ){
                                     ^
ph7.c:46193:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,1,"PH7 engine is running out of memory");
                       ^
ph7.c:46197:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  GenStateInstallLiteral(&(*pGen),pObj,nIdx);
                         ^
ph7.c:46216:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn->nLine,
                       ^
ph7.c:46225:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateLoadLiteral(&(*pGen));
                          ^
ph7.c:46234:39: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateResolveNamespaceLiteral(&(*pGen));
                                      ^
ph7.c:46348:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:46439:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn->nLine,"Expected semi-colon ';' after 'continue' statement");
                      ^
ph7.c:46491:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn->nLine,"Expected semi-colon ';' after 'break' statement");
                      ^
ph7.c:46513:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,
                           ^
ph7.c:46526:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Fatal, PH7 is running out of memory");
                       ^
ph7.c:46595:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Fatal, PH7 is running out of memory");
                       ^
ph7.c:46626:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Expected semi-colon ';' after 'goto' statement");
                      ^
ph7.c:46713:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_STD,PH7_VmInstrLength(pGen->pVm),0,0);
                          ^
ph7.c:46721:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateNextChunk(&(*pGen));
                           ^
ph7.c:46727:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Missing closing braces '}'");
                         ^
ph7.c:46737:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileChunk(&(*pGen),PH7_COMPILE_SINGLE_STMT);
                             ^
ph7.c:46742:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  GenStateLeaveBlock(&(*pGen),0);
                     ^
ph7.c:46745:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_STD,PH7_VmInstrLength(pGen->pVm),0,0);
                          ^
ph7.c:46752:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateNextChunk(&(*pGen));
                           ^
ph7.c:46759:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pEnd[-1].nLine,
                          ^
ph7.c:46779:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileChunk(&(*pGen),PH7_COMPILE_SINGLE_STMT);
                             ^
ph7.c:46784:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  GenStateLeaveBlock(&(*pGen),0);
                     ^
ph7.c:46787:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCompileChunk(&(*pGen),PH7_COMPILE_SINGLE_STMT);
                            ^
ph7.c:46839:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_LOOP,PH7_VmInstrLength(pGen->pVm),0,&pWhileBlock);
                         ^
ph7.c:46857:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:46864:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Unexpected token '%z'",&pGen->pIn->sData);
                           ^
ph7.c:46878:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileBlock(&(*pGen),PH7_TKWRD_ENDWHILE);
                       ^
ph7.c:46927:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_LOOP,PH7_VmInstrLength(pGen->pVm),0,&pDoBlock);
                         ^
ph7.c:46933:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileBlock(&(*pGen),0);
                       ^
ph7.c:46994:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:47001:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Unexpected token '%z'",&pGen->pIn->sData);
                           ^
ph7.c:47087:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:47108:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_LOOP,PH7_VmInstrLength(pGen->pVm),0,&pForBlock);
                         ^
ph7.c:47115:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:47142:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileBlock(&(*pGen),PH7_TKWRD_ENDFOR);
                       ^
ph7.c:47169:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47206:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                           ^
ph7.c:47264:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_LOOP,PH7_VmInstrLength(pGen->pVm),0,&pForeachBlock);
                         ^
ph7.c:47298:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,
                           ^
ph7.c:47309:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:47316:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"foreach: Unexpected token '%z'",&pGen->pIn->sData);
                           ^
ph7.c:47326:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"foreach: Missing $key => $value pair");
                           ^
ph7.c:47334:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Fatal, PH7 engine is running out-of-memory");
                      ^
ph7.c:47348:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"foreach: Missing $key");
                            ^
ph7.c:47355:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_CompileExpr(&(*pGen),0,GenStateForEachNodeValidator);
                        ^
ph7.c:47371:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"foreach: Missing $value");
                           ^
ph7.c:47384:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,GenStateForEachNodeValidator);
                      ^
ph7.c:47407:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileBlock(&(*pGen),PH7_TKWRD_END4EACH);
                       ^
ph7.c:47472:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_COND,PH7_VmInstrLength(pGen->pVm),0,&pCondBlock);
                         ^
ph7.c:47509:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47512:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Unexpected token '%z'",&pGen->pIn->sData);
                       ^
ph7.c:47526:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileBlock(&(*pGen),PH7_TKWRD_ENDIF);
                        ^
ph7.c:47562:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_CompileBlock(&(*pGen),PH7_TKWRD_ENDIF);
                         ^
ph7.c:47621:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"global: Expected variable name");
                             ^
ph7.c:47629:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn[-1].nLine,"global: Empty variable name");
                         ^
ph7.c:47631:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = PH7_CompileExpr(&(*pGen),0,0);
                          ^
ph7.c:47679:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47703:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47728:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_CompileExpr(&(*pGen),EXPR_FLAG_RDONLY_LOAD/* Do not create variable if inexistant */,0);
                        ^
ph7.c:47784:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Expected variable after 'static' keyword");
                            ^
ph7.c:47791:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47804:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Expected variable after 'static' keyword");
                            ^
ph7.c:47815:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"static: Unexpected token '%z'",&pGen->pIn->sData);
                           ^
ph7.c:47824:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Fatal, PH7 engine is running out of memory");
                      ^
ph7.c:47842:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47872:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"var: Expecting variable name");
                           ^
ph7.c:47882:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),0,0);
                       ^
ph7.c:47936:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Namespace: Unexpected token '%z'",&pTok->sData);
                            ^
ph7.c:47947:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,
                           ^
ph7.c:47954:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_GenCompileError(&(*pGen),E_WARNING,nLine,
                     ^
ph7.c:48011:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"use statement: Unexpected token '%z',expecting ';'",
                           ^
ph7.c:48018:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_GenCompileError(&(*pGen),E_NOTICE,nLine,
                     ^
ph7.c:48083:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_GenCompileError(&(*pGen),E_NOTICE,nLine, /* Emit a notice */
                     ^
ph7.c:48158:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:48238:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn->nLine,
                         ^
ph7.c:48255:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Missing argument name");
                            ^
ph7.c:48265:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Invalid argument name");
                            ^
ph7.c:48272:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_ERROR,pIn->nLine,"PH7 engine is running out of memory");
                       ^
ph7.c:48298:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = PH7_GenCompileError(&(*pGen),E_ERROR,pIn->nLine,"Missing argument default value");
                              ^
ph7.c:48302:34: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateProcessArgValue(&(*pGen),&sArg,pIn,pDefend);
                                 ^
ph7.c:48310:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pIn->nLine,"Unexpected token '%z'",&pIn->sData);
                             ^
ph7.c:48380:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_PROTECTED|GEN_BLOCK_FUNC,PH7_VmInstrLength(pGen->pVm),pFunc,&pBlock);
                         ^
ph7.c:48382:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,1,"PH7 engine is running out-of-memory");
                      ^
ph7.c:48391:19: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_CompileBlock(&(*pGen),0);
                  ^
ph7.c:48397:37: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 if( SXERR_ABORT == GenStateFixGoto(&(*pGen),nGotoOfft) ){
                                    ^
ph7.c:48404:21: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 GenStateLeaveBlock(&(*pGen),0);
                    ^
ph7.c:48473:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCollectFuncArgs(pFunc,&(*pGen),pEnd);
                                     ^
ph7.c:48574:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileFuncBody(&(*pGen),pFunc);
                              ^
ph7.c:48594:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_GenCompileError(&(*pGen),E_ERROR,1,"Fatal, PH7 engine is running out-of-memory");
                     ^
ph7.c:48619:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Invalid function name");
                           ^
ph7.c:48647:27: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileFunc(&(*pGen),pName,iFlags,FALSE,0);
                          ^
ph7.c:48749:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),EXPR_FLAG_COMMA_STATEMENT,0);
                      ^
ph7.c:48865:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileExpr(&(*pGen),EXPR_FLAG_COMMA_STATEMENT,0);
                       ^
ph7.c:48953:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Invalid method name");
                           ^
ph7.c:48989:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Fatal, PH7 is running out of memory");
                      ^
ph7.c:49008:46: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCollectFuncArgs(&pMeth->sFunc,&(*pGen),pEnd);
                                             ^
ph7.c:49017:32: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateCompileFuncBody(&(*pGen),&pMeth->sFunc);
                               ^
ph7.c:49172:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn->nLine,"interface: Access type must be public");
                       ^
ph7.c:49209:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileClassConstant(&(*pGen),0,0,pClass);
                                     ^
ph7.c:49235:36: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileClassMethod(&(*pGen),0,FALSE/* Only method signature*/,iFlags,pClass);
                                   ^
ph7.c:49474:36: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = GenStateCompileClassAttr(&(*pGen),iProtection,iAttrflags,pClass);
                                   ^
ph7.c:49488:39: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateCompileClassConstant(&(*pGen),iProtection,iAttrflags,pClass);
                                      ^
ph7.c:49520:37: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
      rc = GenStateCompileClassAttr(&(*pGen),iProtection,iAttrflags,pClass);
                                    ^
ph7.c:49616:36: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = GenStateCompileClassAttr(&(*pGen),iProtection,iAttrflags,pClass);
                                   ^
ph7.c:49619:38: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = GenStateCompileClassMethod(&(*pGen),iProtection,iAttrflags,TRUE,pClass);
                                     ^
ph7.c:49630:34: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateCompileClassAttr(&(*pGen),iProtection,iAttrflags,pClass);
                                 ^
ph7.c:49646:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_ClassInherit(&(*pGen),pClass,pBase);
                         ^
ph7.c:49688:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileClass(&(*pGen),PH7_CLASS_ABSTRACT);
                           ^
ph7.c:49702:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileClass(&(*pGen),PH7_CLASS_FINAL);
                           ^
ph7.c:49717:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateCompileClass(&(*pGen),0);
                           ^
ph7.c:49749:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                            ^
ph7.c:49757:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pRoot->pStart? pRoot->pStart->nLine : 0,
                           ^
ph7.c:49778:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,GenStateThrowNodeValidator);
                      ^
ph7.c:49780:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"throw: Expecting an exception class instance");
                           ^
ph7.c:49884:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_EXCEPTION,PH7_VmInstrLength(pGen->pVm),0,&pCatch);
                         ^
ph7.c:49892:19: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_CompileBlock(&(*pGen),0);
                  ^
ph7.c:49898:21: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 GenStateLeaveBlock(&(*pGen),0);
                    ^
ph7.c:49908:22: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 PH7_GenCompileError(&(*pGen),E_ERROR,nLine,"Fatal, PH7 engine is running out of memory");
                     ^
ph7.c:49927:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,
                      ^
ph7.c:49937:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_EXCEPTION,PH7_VmInstrLength(pGen->pVm),0,&pTry);
                         ^
ph7.c:49947:24: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileBlock(&(*pGen),0);
                       ^
ph7.c:49956:21: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 GenStateLeaveBlock(&(*pGen),0);
                    ^
ph7.c:49965:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pTok->nLine,
                            ^
ph7.c:49980:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileCatch(&(*pGen),pException);
                        ^
ph7.c:49996:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Unexpected token '%z'",&pGen->pIn->sData);
                           ^
ph7.c:50017:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Unexpected token '%z'",
                              ^
ph7.c:50037:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
     rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Unexpected token '%z'",
                              ^
ph7.c:50049:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_CompileBlock(&(*pGen),0);
                        ^
ph7.c:50092:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:50153:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = GenStateEnterBlock(&(*pGen),GEN_BLOCK_LOOP|GEN_BLOCK_SWITCH,
                         ^
ph7.c:50172:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 rc = PH7_CompileExpr(&(*pGen),0,0);
                      ^
ph7.c:50179:28: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,
                           ^
ph7.c:50195:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pTmp->nLine,"Switch: Unexpected token '%z'",&pTmp->sData);
                            ^
ph7.c:50213:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Fatal, PH7 is running out of memory");
                      ^
ph7.c:50232:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Switch: Unexpected token '%z'",
                             ^
ph7.c:50247:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Switch: Unexpected token '%z'",
                             ^
ph7.c:50265:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_GenCompileError(&(*pGen),E_WARNING,pGen->pIn->nLine,"Switch: 'default' case already compiled");
                             ^
ph7.c:50300:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_GenCompileError(&(*pGen),E_ERROR,pGen->pIn->nLine,"Switch: Unexpected token '%z'",
                            ^
ph7.c:50350:21: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = pNode->xCode(&(*pGen),iFlags);
                    ^
ph7.c:50355:23: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_GenCompileError(&(*pGen),E_ERROR,pNode->pStart->nLine,
                      ^
ph7.c:50364:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEmitExprCode(&(*pGen),pNode->pCond,iFlags);
                            ^
ph7.c:50373:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateEmitExprCode(&(*pGen),pNode->pLeft,iFlags);
                             ^
ph7.c:50387:30: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = GenStateEmitExprCode(&(*pGen),pNode->pRight,iFlags);
                             ^
ph7.c:50412:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateEmitExprCode(&(*pGen),apNode[n],iFlags&~EXPR_FLAG_LOAD_IDX_STORE);
                              ^
ph7.c:50422:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEmitExprCode(&(*pGen),pNode->pLeft,iFlags);
                            ^
ph7.c:50443:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateEmitExprCode(&(*pGen),apNode[n],iFlags&~EXPR_FLAG_LOAD_IDX_STORE);
                              ^
ph7.c:50473:29: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = GenStateEmitExprCode(&(*pGen),pNode->pRight,iFlags);
                            ^
ph7.c:50622:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  rc = PH7_ExprMakeTree(&(*pGen),&sExprNode,&pRoot);
                        ^
ph7.c:50627:25: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = xTreeValidator(&(*pGen),pRoot);
                        ^
ph7.c:50631:31: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = GenStateEmitExprCode(&(*pGen),pRoot,iFlags);
                              ^
ph7.c:50636:20: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
  PH7_ExprFreeTree(&(*pGen),&sExprNode);
                   ^
ph7.c:50788:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
   rc = PH7_CompileBlock(&(*pGen),0);
                         ^
ph7.c:50817:26: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = PH7_CompileExpr(&(*pGen),0,0);
                         ^
ph7.c:50824:16: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
    rc = xCons(&(*pGen));
               ^
ph7.c:50861:13: style: Redundant pointer operation on 'pTokenSet' - it's already a pointer. [redundantPointerOp]
 SySetReset(&(*pTokenSet));
            ^
ph7.c:50863:20: style: Redundant pointer operation on 'pTokenSet' - it's already a pointer. [redundantPointerOp]
 pGen->pTokenSet = &(*pTokenSet);
                   ^
ph7.c:50867:95: style: Redundant pointer operation on 'pTokenSet' - it's already a pointer. [redundantPointerOp]
 PH7_TokenizePHP(SyStringData(&pScript->sData),SyStringLength(&pScript->sData),pScript->nLine,&(*pTokenSet));
                                                                                              ^
ph7.c:50910:37: style: Redundant pointer operation on 'pGen' - it's already a pointer. [redundantPointerOp]
 if( SXERR_ABORT == GenStateFixGoto(&(*pGen),0) ){
                                    ^
ph7.c:50991:34: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   pRawObj = PH7_ReserveConstObj(&(*pVm),&nObjIdx);
                                 ^
ph7.c:50998:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmEmitInstr(&(*pVm),PH7_OP_LOADC,0,nObjIdx,0,0);
                   ^
ph7.c:51004:20: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
   PH7_VmEmitInstr(&(*pVm),PH7_OP_CONSUME,nRawObj,0,0,0);
                   ^
ph7.c:51025:15: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pGen->pVm  = &(*pVm);
              ^
ph7.c:51037:75: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 GenStateInitBlock(pGen,&pGen->sGlobal,GEN_BLOCK_GLOBAL,PH7_VmInstrLength(&(*pVm)),0);
                                                                          ^
ph7.c:59892:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
  ph7_create_function(&(*pVm),aBuiltInFunc[n].zName,aBuiltInFunc[n].xFunc,0);
                      ^
ph7.c:59895:31: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_RegisterHashmapFunctions(&(*pVm));
                              ^
ph7.c:59897:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 PH7_RegisterIORoutine(&(*pVm));
                       ^
ph7.c:60416:21: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
  rc = EngineConfig(&(*pEngine),nConfigOp,ap);
                    ^
ph7.c:60513:21: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = EngineRelease(&(*pEngine));
                    ^
ph7.c:60570:22: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmInit(pVm,&(*pEngine));
                     ^
ph7.c:60585:24: style: Redundant pointer operation on 'pScript' - it's already a pointer. [redundantPointerOp]
 PH7_CompileScript(pVm,&(*pScript),iFlags);
                       ^
ph7.c:60650:21: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = ProcessScript(&(*pEngine),ppOutVm,&sScript,0,0);
                    ^
ph7.c:60683:21: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
 rc = ProcessScript(&(*pEngine),ppOutVm,&sScript,iFlags,0);
                    ^
ph7.c:60734:24: style: Redundant pointer operation on 'pEngine' - it's already a pointer. [redundantPointerOp]
    rc = ProcessScript(&(*pEngine),ppOutVm,&sScript,iFlags,zFilePath);
                       ^
ph7.c:60765:18: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmDump(&(*pVm),xConsumer,pUserData);
                 ^
ph7.c:60790:23: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmConfigure(&(*pVm),iConfigOp,ap);
                      ^
ph7.c:60818:26: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmByteCodeExec(&(*pVm));
                         ^
ph7.c:60849:19: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmReset(&(*pVm));
                  ^
ph7.c:60877:21: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmRelease(&(*pVm));
                    ^
ph7.c:60931:36: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmInstallForeignFunction(&(*pVm),&sName,xFunc,pUserData);
                                   ^
ph7.c:61004:30: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 rc = PH7_VmRegisterConstant(&(*pVm),&sName,xExpand,pUserData);
                             ^
ph7.c:61077:24: style: Redundant pointer operation on 'pVm' - it's already a pointer. [redundantPointerOp]
 pMap = PH7_NewHashmap(&(*pVm),0,0);
                       ^
ph7.c:61204:21: style: Redundant pointer operation on 'pLeft' - it's already a pointer. [redundantPointerOp]
 rc = PH7_MemObjCmp(&(*pLeft),&(*pRight),bStrict,0);
                    ^
ph7.c:61204:31: style: Redundant pointer operation on 'pRight' - it's already a pointer. [redundantPointerOp]
 rc = PH7_MemObjCmp(&(*pLeft),&(*pRight),bStrict,0);
                              ^
ph7.c:61339:28: style: Redundant pointer operation on 'pCtx' - it's already a pointer. [redundantPointerOp]
 PH7_VmReleaseContextValue(&(*pCtx),pValue);
                           ^
ph7.c:61487:57: style: Redundant pointer operation on 'pKey' - it's already a pointer. [redundantPointerOp]
 rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,&(*pKey),&(*pValue));
                                                        ^
ph7.c:61487:66: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
 rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,&(*pKey),&(*pValue));
                                                                 ^
ph7.c:61504:60: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
  rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,0,&(*pValue));
                                                           ^
ph7.c:61509:64: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
  rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,&sKey,&(*pValue));
                                                               ^
ph7.c:61528:63: style: Redundant pointer operation on 'pValue' - it's already a pointer. [redundantPointerOp]
 rc = PH7_HashmapInsert((ph7_hashmap *)pArray->x.pOther,&sKey,&(*pValue));
                                                              ^
ph7.c:4189:14: style:inconclusive: Function 'PH7_VmBlobConsumer' argument 1 names different: declaration 'pSrc' definition 'pOut'. [funcArgNamesDifferent]
 const void *pOut,   /* VM Generated output*/
             ^
ph7.c:2553:50: note: Function 'PH7_VmBlobConsumer' argument 1 names different: declaration 'pSrc' definition 'pOut'.
PH7_PRIVATE sxi32 PH7_VmBlobConsumer(const void *pSrc,unsigned int nLen,void *pUserData);
                                                 ^
ph7.c:4189:14: note: Function 'PH7_VmBlobConsumer' argument 1 names different: declaration 'pSrc' definition 'pOut'.
 const void *pOut,   /* VM Generated output*/
             ^
ph7.c:28813:51: style:inconclusive: Function 'PH7_TokenValueToInt64' argument 1 names different: declaration 'pData' definition 'pVal'. [funcArgNamesDifferent]
PH7_PRIVATE sxi64 PH7_TokenValueToInt64(SyString *pVal)
                                                  ^
ph7.c:2536:51: note: Function 'PH7_TokenValueToInt64' argument 1 names different: declaration 'pData' definition 'pVal'.
PH7_PRIVATE sxi64 PH7_TokenValueToInt64(SyString *pData);
                                                  ^
ph7.c:28813:51: note: Function 'PH7_TokenValueToInt64' argument 1 names different: declaration 'pData' definition 'pVal'.
PH7_PRIVATE sxi64 PH7_TokenValueToInt64(SyString *pVal)
                                                  ^
ph7.c:8121:15: style: Local variable 'pFrame' shadows outer variable [shadowVariable]
     VmFrame *pFrame = pVm->pFrame;
              ^
ph7.c:8090:12: note: Shadowed declaration
  VmFrame *pFrame;
           ^
ph7.c:8121:15: note: Shadow variable
     VmFrame *pFrame = pVm->pFrame;
              ^
ph7.c:8261:29: style: Local variable 'pThis' shadows outer variable [shadowVariable]
        ph7_class_instance *pThis = (ph7_class_instance *)pArg->x.pOther;
                            ^
ph7.c:8086:23: note: Shadowed declaration
  ph7_class_instance *pThis;
                      ^
ph7.c:8261:29: note: Shadow variable
        ph7_class_instance *pThis = (ph7_class_instance *)pArg->x.pOther;
                            ^
ph7.c:8307:14: style: Local variable 'sName' shadows outer variable [shadowVariable]
    SyString sName;
             ^
ph7.c:8042:11: note: Shadowed declaration
 SyString sName;
          ^
ph7.c:8307:14: note: Shadow variable
    SyString sName;
             ^
ph7.c:8329:10: style: Local variable 'n' shadows outer variable [shadowVariable]
   sxu32 n;
         ^
ph7.c:8093:9: note: Shadowed declaration
  sxu32 n;
        ^
ph7.c:8329:10: note: Shadow variable
   sxu32 n;
         ^
ph7.c:32649:24: style: Local variable 'aFmt' shadows outer variable [shadowVariable]
static const SyFmtInfo aFmt[] = {
                       ^
ph7.c:55039:27: note: Shadowed declaration
static const ph7_fmt_info aFmt[] = {
                          ^
ph7.c:32649:24: note: Shadow variable
static const SyFmtInfo aFmt[] = {
                       ^
ph7.c:33397:9: style: Local variable 'c' shadows outer variable [shadowVariable]
    int c = 0;
        ^
ph7.c:33290:6: note: Shadowed declaration
 int c;
     ^
ph7.c:33397:9: note: Shadow variable
    int c = 0;
        ^
ph7.c:33441:8: style: Local variable 'c' shadows outer variable [shadowVariable]
   int c;
       ^
ph7.c:33290:6: note: Shadowed declaration
 int c;
     ^
ph7.c:33441:8: note: Shadow variable
   int c;
       ^
ph7.c:46189:14: style: Local variable 'pObj' shadows outer variable [shadowVariable]
  ph7_value *pObj;
             ^
ph7.c:46122:13: note: Shadowed declaration
 ph7_value *pObj;
            ^
ph7.c:46189:14: note: Shadow variable
  ph7_value *pObj;
             ^
ph7.c:48244:11: style: Local variable 'zDup' shadows outer variable [shadowVariable]
    char *zDup;
          ^
ph7.c:48210:8: note: Shadowed declaration
 char *zDup;          /* Copy of argument name */
       ^
ph7.c:48244:11: note: Shadow variable
    char *zDup;
          ^
ph7.c:48486:11: style: Local variable 'nLine' shadows outer variable [shadowVariable]
    sxu32 nLine = pGen->pIn->nLine;
          ^
ph7.c:48439:8: note: Shadowed declaration
 sxu32 nLine;
       ^
ph7.c:48486:11: note: Shadow variable
    sxu32 nLine = pGen->pIn->nLine;
          ^
ph7.c:48498:10: style: Local variable 'iFlags' shadows outer argument [shadowArgument]
     int iFlags = 0;
         ^
ph7.c:48432:8: note: Shadowed declaration
 sxi32 iFlags,        /* Control flags */
       ^
ph7.c:48498:10: note: Shadow variable
     int iFlags = 0;
         ^
ph7.c:48529:17: style: Local variable 'pName' shadows outer argument [shadowArgument]
      SyString *pName;
                ^
ph7.c:48431:12: note: Shadowed declaration
 SyString *pName,     /* Function name. NULL otherwise */
           ^
ph7.c:48529:17: note: Shadow variable
      SyString *pName;
                ^
ph7.c:52523:7: style: Local variable 'nOfft' shadows outer variable [shadowVariable]
  int nOfft;
      ^
ph7.c:52506:8: note: Shadowed declaration
 sxu32 nOfft;
       ^
ph7.c:52523:7: note: Shadow variable
  int nOfft;
      ^
ph7.c:55908:8: style: Local variable 'nByte' shadows outer argument [shadowArgument]
   int nByte = (int)(zIn-zPtr);
       ^
ph7.c:55872:6: note: Shadowed declaration
 int nByte,  /* Input length */
     ^
ph7.c:55908:8: note: Shadow variable
   int nByte = (int)(zIn-zPtr);
       ^
ph7.c:59444:20: style: Local variable 'aISO8601' shadows outer variable [shadowVariable]
  static const int aISO8601[] = { 7 /* Sunday */,1 /* Monday */,2,3,4,5,6 };
                   ^
ph7.c:58480:18: note: Shadowed declaration
static const int aISO8601[] = { 7 /* Sunday */,1 /* Monday */,2,3,4,5,6 };
                 ^
ph7.c:59444:20: note: Shadow variable
  static const int aISO8601[] = { 7 /* Sunday */,1 /* Monday */,2,3,4,5,6 };
                   ^
ph7.c:59532:7: style: Local variable 'iVal' shadows outer variable [shadowVariable]
  int iVal;
      ^
ph7.c:59518:12: note: Shadowed declaration
 ph7_int64 iVal = 0;
           ^
ph7.c:59532:7: note: Shadow variable
  int iVal;
      ^
ph7.c:30789:47: error: Signed integer overflow for expression '0xDEAD<<16'. [integerOverflow]
  pBucket->nBucket = (sxu32)(SXMEM_POOL_MAGIC << 16) | SXU16_HIGH;
                                              ^
ph7.c:30812:39: error: Signed integer overflow for expression '0xDEAD<<16'. [integerOverflow]
 pBucket->nBucket = (SXMEM_POOL_MAGIC << 16) | nBucket;
                                      ^
ph7.c:13352:6: error: Uninitialized struct member: sChunk.nByte [uninitStructMember]
 if( sChunk.nByte < 1 ){
     ^
ph7.c:13627:6: error: Uninitialized struct member: sFile.nByte [uninitStructMember]
 if( sFile.nByte < 1 ){
     ^
ph7.c:13661:6: error: Uninitialized struct member: sFile.nByte [uninitStructMember]
 if( sFile.nByte < 1 ){
     ^
ph7.c:13699:6: error: Uninitialized struct member: sFile.nByte [uninitStructMember]
 if( sFile.nByte < 1 ){
     ^
ph7.c:13733:6: error: Uninitialized struct member: sFile.nByte [uninitStructMember]
 if( sFile.nByte < 1 ){
     ^
ph7.c:8867:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg);
  ^
ph7.c:8868:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:8888:18: style: Variable 'pObj' is assigned a value that is never used. [unreadVariable]
 ph7_value *pObj = 0;
                 ^
ph7.c:8961:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:8962:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:8987:18: style: Variable 'pObj' is assigned a value that is never used. [unreadVariable]
 ph7_value *pObj = 0;
                 ^
ph7.c:9007:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9008:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:9192:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9193:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:9397:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9398:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:9647:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9648:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:9689:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:9690:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10590:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10591:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10626:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:10627:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:10658:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10659:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10685:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10686:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10711:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10712:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10738:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10739:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10758:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:10759:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:10924:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10925:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10952:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:10953:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:10978:2: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pCtx);
 ^
ph7.c:10979:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:10980:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:11007:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:11008:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:11127:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:11128:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:11509:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:11510:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:11986:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:11987:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:12056:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:12057:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:12165:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:12166:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:12295:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:12296:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:12319:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:12320:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:12333:11: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 int nArg = 1;
          ^
ph7.c:12347:8: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  nArg = 0;
       ^
ph7.c:12493:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg);
 ^
ph7.c:12494:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg); /* cc warning */
 ^
ph7.c:12658:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:12659:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:13521:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:13522:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:13556:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:13557:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:14062:4: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pKey);
   ^
ph7.c:14345:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:14346:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:14384:3: style: Variable 'pCtxData' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pCtxData); /* cc warning */
  ^
ph7.c:14780:2: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pCtx); /* cc warning */
 ^
ph7.c:14791:2: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pKey); /* cc warning */
 ^
ph7.c:14792:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:15001:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:15002:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:15785:3: style: Variable 'pNS' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pNS); /* cc warning */
  ^
ph7.c:15822:3: style: Variable 'pNS' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pNS); /* cc warning */
  ^
ph7.c:15989:2: style: Variable 'zMessage' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(zMessage); /* cc warning */
 ^
ph7.c:16572:9: style: Variable 'iNest' is assigned a value that is never used. [unreadVariable]
  iNest = 0; /* cc warning */
        ^
ph7.c:17855:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:17856:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:19849:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19850:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:19876:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19877:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:19906:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19907:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:19937:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19938:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:19968:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:19969:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:22055:3: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pKey); /* cc warning */
  ^
ph7.c:22168:3: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pCtx); /* cc warning */
  ^
ph7.c:24625:12: style: Variable 'recursive' is assigned a value that is never used. [unreadVariable]
 recursive = 0; /* cc warning */
           ^
ph7.c:25163:4: style: Variable 'pResource' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pResource); /* cc warning */
   ^
ph7.c:25212:13: style: Variable 'pResource' is assigned a value that is never used. [unreadVariable]
  pResource = 0; /* Compiler warning */
            ^
ph7.c:31066:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = MemBackendRelease(&(*pBackend));
    ^
ph7.c:32084:12: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
 sxreal *p = 0;
           ^
ph7.c:32388:2: style: Variable 'pLex' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pLex); /* Prevent compiler warning */
 ^
ph7.c:33301:3: style: Variable 'pUnused2' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pUnused2);
  ^
ph7.c:33812:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = SySetPut(pTagStack,(const void *)pTag);
     ^
ph7.c:33929:16: style: Variable 'sPrefix.nLine' is assigned a value that is never used. [unreadVariable]
 sPrefix.nLine = pTag->nLine;
               ^
ph7.c:34549:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = SyLittleEndianUnpack32(&pArch->nCentralOfft,&zBuf[16],sizeof(sxu32));
     ^
ph7.c:34658:16: style: Variable 'nIncr' is assigned a value that is never used. [unreadVariable]
 nOfft = nIncr = 0;
               ^
ph7.c:34890:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:35724:6: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
     SXUNUSED(pUserData); /* Prevent compiler warning */
     ^
ph7.c:35725:6: style: Variable 'pCtxData' is assigned a value that is never used. [unreadVariable]
     SXUNUSED(pCtxData);
     ^
ph7.c:36551:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = zCurEnd   = 0; /* Prevent compiler warning */
      ^
ph7.c:36551:19: style: Variable 'zCurEnd' is assigned a value that is never used. [unreadVariable]
 zCur = zCurEnd   = 0; /* Prevent compiler warning */
                  ^
ph7.c:37950:11: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 sxi32 rc = SXRET_OK;
          ^
ph7.c:38494:2: style: Variable 'pCmpData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pCmpData); /* cc warning */
 ^
ph7.c:38611:2: style: Variable 'pCmpData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pCmpData); /* cc warning */
 ^
ph7.c:38695:2: style: Variable 'pB' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pB); /* cc warning */
 ^
ph7.c:38696:2: style: Variable 'pCmpData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pCmpData);
 ^
ph7.c:42486:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SXRET_OK;
    ^
ph7.c:42545:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42571:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42579:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42593:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42602:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42611:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42624:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_mon' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_mday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_year' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_yday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_wday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42650:2: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42652:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused); /* cc warning */
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_hour' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_min' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_sec' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_yday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_wday' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42672:2: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
 STRUCT_TM_TO_SYTM(pTm,&sTm);
 ^
ph7.c:42674:2: style: Variable 'pUnused' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUnused); /* cc warning */
 ^
ph7.c:42731:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:42740:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42749:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42758:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42767:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42776:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42785:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42794:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42803:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42812:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42821:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42830:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42839:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42848:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42857:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42866:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42875:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42884:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42893:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42902:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42911:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42920:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42929:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42938:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42947:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42956:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42965:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42974:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42983:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:42992:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:43001:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:43010:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:43019:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:43030:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:43041:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData);
 ^
ph7.c:43204:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43213:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43222:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43231:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43240:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43249:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43258:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43267:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43276:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43285:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43294:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43303:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43312:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43321:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43330:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43339:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43348:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43357:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43366:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43375:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43385:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43395:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43404:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43413:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43422:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43431:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43440:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43449:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43458:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43467:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43476:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43485:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43494:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43503:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43512:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43521:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43530:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43539:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43548:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43557:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43566:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43575:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43584:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43593:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43602:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43611:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43620:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43629:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43638:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43647:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43656:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43665:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43674:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43683:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43692:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43701:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43710:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43719:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43728:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43737:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43746:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43755:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43764:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43773:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43782:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43791:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43800:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43809:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43851:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43860:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43869:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43878:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43887:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43896:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43905:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43914:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43923:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43933:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43942:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43951:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43960:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43969:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43978:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43987:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:43996:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44005:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44014:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44023:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44032:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44041:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44050:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44059:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44068:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44077:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44086:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44095:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44104:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44113:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44122:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44131:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44140:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44149:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44158:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44167:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44177:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44186:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44195:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44204:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44213:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44222:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44231:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44240:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44249:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44258:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44267:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44276:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44285:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44294:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44303:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:44312:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:45045:4: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(iCompileFlag); /* cc warning */
   ^
ph7.c:45103:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
ph7.c:45177:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
ph7.c:45312:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = 0;
      ^
ph7.c:45578:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:45589:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = GenStateCompileString(&(*pGen));
    ^
ph7.c:45590:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:45831:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:45896:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
ph7.c:45936:2: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(iCompileFlag); /* cc warning */
 ^
ph7.c:46002:5: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
    SXUNUSED(iCompileFlag); /* cc warning */
    ^
ph7.c:46236:3: style: Variable 'iCompileFlag' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(iCompileFlag); /* cc warning */
  ^
ph7.c:46458:8: style: Variable 'nLine' is assigned a value that is never used. [unreadVariable]
 nLine = pGen->pIn->nLine;
       ^
ph7.c:50580:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SXRET_OK;
    ^
ph7.c:52219:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg);
 ^
ph7.c:52220:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:52658:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = 0; /* cc warning */
      ^
ph7.c:52732:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = 0; /* cc warning */
      ^
ph7.c:52785:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = 0; /* cc warning */
      ^
ph7.c:52835:7: style: Variable 'zCur' is assigned a value that is never used. [unreadVariable]
 zCur = 0; /* cc warning */
      ^
ph7.c:53069:3: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(nArg); /* cc warning */
  ^
ph7.c:53070:3: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(apArg);
  ^
ph7.c:53438:3: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
  SXUNUSED(pKey); /* cc warning */
  ^
ph7.c:54676:4: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
 c = 0; /* cc warning */
   ^
ph7.c:55536:2: style: Variable 'pUserData' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pUserData); /* cc warning */
 ^
ph7.c:57219:2: style: Variable 'pKey' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pKey); /* cc warning */
 ^
ph7.c:58254:2: style: Variable 'nArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(nArg); /* cc warning */
 ^
ph7.c:58255:2: style: Variable 'apArg' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(apArg);
 ^
ph7.c:58344:3: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:58344:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:58344:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:58367:3: style: Variable 'sTm.tm_isdst' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:58367:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:58367:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:59196:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:59196:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:59212:3: style: Variable 'sTm.tm_gmtoff' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:59212:3: style: Variable 'sTm.tm_zone' is assigned a value that is never used. [unreadVariable]
  STRUCT_TM_TO_SYTM(pTm,&sTm);
  ^
ph7.c:61843:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = SyBlobFormatAp(&pVal->sBlob,zFormat,ap);
    ^
ph7.c:10309:11: error: va_list 'ap' was opened but not closed by va_end(). [va_end_missing]
 return rc;
          ^
ph7.c:3427:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PH7_VmUnsetMemObj(&(*pVm),aSlot[n].nIdx,FALSE);
^
ph7.c:4169:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 VmEvalChunk(&(*pVm),0,&sBuiltin,PH7_PHP_ONLY,FALSE);
^
ph7.c:4503:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int bNullify = FALSE;
^
ph7.c:4521:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  bDup = FALSE;
^
ph7.c:5505:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    SyBlobLength(&pTos->sBlob),FALSE,0);
^
ph7.c:5585:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pObj = VmExtractMemObj(&(*pVm),&sName,pInstr->p3 ? FALSE : TRUE,pInstr->iP1 != 1);
^
ph7.c:5796:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PH7_HashmapExtractNodeValue(pNode,pTos,FALSE);
^
ph7.c:5861:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   pValue = VmExtractMemObj(pVm,&sEnv.sName,FALSE,FALSE);
^
ph7.c:5923:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pObj = VmExtractMemObj(&(*pVm),&sName,pInstr->p3 ? FALSE : TRUE,TRUE);
^
ph7.c:6272:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_MemObjAdd(pNos,pTos,FALSE);
^
ph7.c:6953:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = PH7_MemObjCmp(pNos,pTos,FALSE,0);
^
ph7.c:7068:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = PH7_MemObjCmp(pNos,pTos,FALSE,0);
^
ph7.c:7117:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = PH7_MemObjCmp(pNos,pTos,FALSE,0);
^
ph7.c:7263:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   pObj = VmExtractMemObj(&(*pVm),&sName,FALSE,TRUE);
^
ph7.c:7545:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    ph7_value *pKey = VmExtractMemObj(&(*pVm),&pInfo->sKey,FALSE,TRUE);
^
ph7.c:7562:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pValue = VmExtractMemObj(&(*pVm),&pInfo->sValue,FALSE,TRUE);
^
ph7.c:7577:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pVmAttr->pAttr->iProtection,FALSE) ){
^
ph7.c:7596:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    ph7_value *pKey = VmExtractMemObj(&(*pVm),&pInfo->sKey,FALSE,TRUE);
^
ph7.c:7617:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     pValue = VmExtractMemObj(&(*pVm),&pInfo->sValue,FALSE,TRUE);
^
ph7.c:7761:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      SyBlobLength(&pNos->sBlob),FALSE,0);
^
ph7.c:8013:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = PH7_MemObjCmp(&sValue,&sCaseValue,FALSE,0);
^
ph7.c:8114:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       SyBlobLength(&pTarget->sBlob),FALSE,0);
^
ph7.c:8200:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   pObj = VmExtractMemObj(&(*pVm),&sThis,FALSE,TRUE);
^
ph7.c:8287:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      pObj = VmExtractMemObj(&(*pVm),&aFormalArg[n].sName,FALSE,TRUE);
^
ph7.c:8303:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     pObj = VmExtractMemObj(&(*pVm),&aFormalArg[n].sName,FALSE,TRUE);
^
ph7.c:8337:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pValue = VmExtractMemObj(pVm,&pEnv->sName,FALSE,TRUE);
^
ph7.c:8350:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pObj = VmExtractMemObj(&(*pVm),&aFormalArg[n].sName,FALSE,TRUE);
^
ph7.c:8394:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(&pVmFunc->aByteCode),pFrameStack,-1,pTos,&n,FALSE);
^
ph7.c:8575:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pByteCode),pStack,-1,&(*pResult),0,FALSE);
^
ph7.c:8642:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 VmByteCodeExec(&(*pVm),(VmInstr *)SySetBasePtr(pVm->pByteContainer),pVm->aOps,-1,&pVm->sExec,0,FALSE);
^
ph7.c:9854:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if( VmClassMemberAccess(pCtx->pVm,pClass,&pAttr->sName,pAttr->iProtection,FALSE) ){
^
ph7.c:9930:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if( VmClassMemberAccess(pCtx->pVm,pThis->pClass,pAttrName,pVmAttr->pAttr->iProtection,FALSE) ){
^
ph7.c:9961:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
ph7.c:9971:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:10007:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:10034:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:10929:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = VmObFlush(pVm,pOb,FALSE);
^
ph7.c:11461:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PH7_VmUnsetMemObj(&(*pVm),nIdx,FALSE);
^
ph7.c:11621:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_MemObjDump(&sDump,apArg[0],FALSE,0,0,0);
^
ph7.c:11654:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_MemObjDump(&sDump,apArg[0],FALSE,0,0,0);
^
ph7.c:11766:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   VmEvalChunk(pVm,pCtx,&sChunk,PH7_PHP_ONLY|PH7_PHP_EXPR,FALSE);
^
ph7.c:12455:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   ph7_value *pObj = VmExtractMemObj(&(*pVm),&pCatch->sThis,FALSE,TRUE);
^
ph7.c:12928:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   pKey = VmExtractMemObj(pVm,&sVar,FALSE,FALSE);
^
ph7.c:13002:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pObj = VmExtractMemObj(pVm,&sVar,FALSE,FALSE);
^
ph7.c:13131:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pObj = VmExtractMemObj(pVm,&sVar,TRUE,FALSE);
^
ph7.c:13358:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 VmEvalChunk(pCtx->pVm,&(*pCtx),&sChunk,PH7_PHP_ONLY,FALSE);
^
ph7.c:13376:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:13633:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = VmExecIncludedFile(&(*pCtx),&sFile,FALSE);
^
ph7.c:13705:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = VmExecIncludedFile(&(*pCtx),&sFile,FALSE);
^
ph7.c:16752:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PH7_HashmapUnlinkNode(apNode[n],FALSE);
^
ph7.c:16960:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sxu8 bHostOnly = FALSE;
^
ph7.c:16961:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sxu8 bIPv6 = FALSE ;
^
ph7.c:17053:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   if( bIPv6 == FALSE ){
^
ph7.c:17178:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  bEol = FALSE;
^
ph7.c:17520:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   VmHttpSplitEncodedQuery(&(*pVm),pValue,&sWorker,FALSE);
^
ph7.c:20646:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PH7_VmPushFilePath(pVm,(const char *)SyBlobData(&sWorker),SyBlobLength(&sWorker),FALSE,pNew);
^
ph7.c:20659:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PH7_VmPushFilePath(pVm,sFile.zString,sFile.nByte,FALSE,pNew);
^
ph7.c:20876:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pBuf = ph7_context_alloc_chunk(pCtx,(unsigned int)nLen,FALSE,FALSE);
^
ph7.c:21257:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev = (io_private *)ph7_context_alloc_chunk(pCtx,sizeof(io_private),TRUE,FALSE);
^
ph7.c:21293:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int use_include  = FALSE;
^
ph7.c:21320:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  use_include,nArg > 2 ? apArg[2] : 0,FALSE,0);
^
ph7.c:21372:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int use_include  = FALSE;
^
ph7.c:21398:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = PH7_StreamOpenHandle(pCtx->pVm,pStream,zFile,PH7_IO_OPEN_RDONLY,use_include,nArg > 2 ? apArg[2] : 0,FALSE,0);
^
ph7.c:21466:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int use_include  = FALSE;
^
ph7.c:21516:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nArg > 3 ? apArg[3] : 0,FALSE,FALSE);
^
ph7.c:21595:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev = (io_private *)ph7_context_alloc_chunk(pCtx,sizeof(io_private),TRUE,FALSE);
^
ph7.c:21619:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev->pHandle = PH7_StreamOpenHandle(pCtx->pVm,pStream,zFile,PH7_IO_OPEN_RDONLY,use_include,nArg > 2 ? apArg[2] : 0,FALSE,0);
^
ph7.c:21712:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pIn = PH7_StreamOpenHandle(pCtx->pVm,pSin,zFile,PH7_IO_OPEN_RDONLY,FALSE,nArg > 2 ? apArg[2] : 0,FALSE,0);
^
ph7.c:21739:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PH7_IO_OPEN_CREATE|PH7_IO_OPEN_TRUNC|PH7_IO_OPEN_RDWR,FALSE,nArg > 2 ? apArg[2] : 0,FALSE,0);
^
ph7.c:22228:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_InputFormat(fprintfConsumer,pCtx,zFormat,nLen,nArg - 1,&apArg[1],(void *)&sFdata,FALSE);
^
ph7.c:22504:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pDev = (io_private *)ph7_context_alloc_chunk(pCtx,sizeof(io_private),TRUE,FALSE);
^
ph7.c:22525:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  nArg > 2 ? ph7_value_to_bool(apArg[2]) : FALSE,pResource,FALSE,0);
^
ph7.c:22615:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int raw_output  = FALSE;
^
ph7.c:22641:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = PH7_StreamOpenHandle(pCtx->pVm,pStream,zFile,PH7_IO_OPEN_RDONLY,FALSE,0,FALSE,0);
^
ph7.c:22686:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int raw_output  = FALSE;
^
ph7.c:22712:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = PH7_StreamOpenHandle(pCtx->pVm,pStream,zFile,PH7_IO_OPEN_RDONLY,FALSE,0,FALSE,0);
^
ph7.c:22783:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = PH7_StreamOpenHandle(pCtx->pVm,pStream,zFile,PH7_IO_OPEN_RDONLY,FALSE,0,FALSE,0);
^
ph7.c:22867:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pArchive = (SyArchive *)ph7_context_alloc_chunk(pCtx,sizeof(SyArchive)+sizeof(zip_raw_data),TRUE,FALSE);
^
ph7.c:22907:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pHandle = PH7_StreamOpenHandle(pCtx->pVm,pStream,zFile,PH7_IO_OPEN_RDONLY,FALSE,0,FALSE,0);
^
ph7.c:26322:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:26727:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   }else if( PH7_IsLangConstruct(nKeyword,FALSE) == TRUE && &pCur[1] < pGen->pEnd ){
^
ph7.c:26845:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pNode->xCode == PH7_CompileVariable ? TRUE : FALSE;
^
ph7.c:26855:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    return FALSE;
^
ph7.c:26858:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return FALSE;
^
ph7.c:26866:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:27339:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( ExprIsModifiableValue(apNode[iLeft],FALSE) == FALSE || (apNode[iLeft]->pOp && apNode[iLeft]->pOp->iVmOp == PH7_OP_MEMBER /*->,::*/) ){
^
ph7.c:27348:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       if(  ExprIsModifiableValue(apNode[iRight],TRUE) == FALSE ){
^
ph7.c:27473:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( ExprIsModifiableValue(apNode[iLeft],FALSE) == FALSE ){
^
ph7.c:29087:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return n > 0 ? TRUE : FALSE;
^
ph7.c:29335:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
ph7.c:29342:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return FALSE;
^
ph7.c:29346:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return rc == SXRET_OK ? TRUE : FALSE;
^
ph7.c:29349:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:29368:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pObj->x.iVal == 0 ? TRUE : FALSE;
^
ph7.c:29370:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pObj->rVal == (ph7_real)0 ? TRUE : FALSE;
^
ph7.c:29386:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return zIn >= zEnd ? TRUE : FALSE;
^
ph7.c:29390:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return pMap->nEntry == 0 ? TRUE : FALSE;
^
ph7.c:29392:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
ph7.c:29419:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sxu8 bReal = FALSE;
^
ph7.c:30019:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    MemObjStringValue(&(*pOut),&(*pObj),FALSE);
^
ph7.c:30992:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bInheritMutex = pParent->pMutexMethods ? TRUE : FALSE;
^
ph7.c:31734:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  *pReal = FALSE;
^
ph7.c:31790:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
ph7.c:31807:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
ph7.c:31842:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
ph7.c:31859:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
ph7.c:31917:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
ph7.c:31932:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
ph7.c:31967:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
ph7.c:31983:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
ph7.c:32015:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int isNeg = FALSE;
^
ph7.c:32031:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  isNeg = (zSrc[0] == '-') ? TRUE :FALSE;
^
ph7.c:32080:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 sxu8 neg = FALSE;
^
ph7.c:32098:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  neg =  zSrc[0] == '-' ? TRUE : FALSE ;
^
ph7.c:32131:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 neg = FALSE;
^
ph7.c:32135:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   neg = zSrc[0] == '-' ? TRUE : FALSE ;
^
ph7.c:32522:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( bUTF8 == FALSE ){
^
ph7.c:36359:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 sxu8 bNowDoc = FALSE;
^
ph7.c:36372:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  bNowDoc =  zIn[0] == '\'' ? TRUE : FALSE;
^
ph7.c:36916:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PH7_VmUnsetMemObj(pVm,pNode->nValIdx,FALSE);
^
ph7.c:37182:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return FALSE;
^
ph7.c:37197:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:37288:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapInsertBlobKey(&(*pMap),SyBlobData(&pKey->sBlob),SyBlobLength(&pKey->sBlob),&(*pVal),0,FALSE);
^
ph7.c:37317:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapInsertIntKey(&(*pMap),pKey->x.iVal,&(*pVal),0,FALSE);
^
ph7.c:37335:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapInsertIntKey(&(*pMap),pMap->iNextIdx,&(*pVal),0,FALSE);
^
ph7.c:37470:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   rc = HashmapInsertIntKey(&(*pMap),pNode->xKey.iKey,pObj,0,FALSE);
^
ph7.c:37475:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   SyBlobLength(&pNode->xKey.sKey),pObj,0,FALSE);
^
ph7.c:37501:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapExtractNodeValue(pLeft,&sObj1,FALSE);
^
ph7.c:37502:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapExtractNodeValue(pRight,&sObj2,FALSE);
^
ph7.c:37900:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   rc = HashmapInsertIntKey(&(*pDest),pEntry->xKey.iKey,pVal,0,FALSE);
^
ph7.c:37971:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       pObj,0,FALSE);
^
ph7.c:37983:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     rc = HashmapInsertIntKey(&(*pLeft),pEntry->xKey.iKey,pObj,0,FALSE);
^
ph7.c:38134:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PH7_VmUnsetMemObj(pVm,pEntry->nValIdx,FALSE);
^
ph7.c:38459:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapNodeCmp(pA,pB,FALSE);
^
ph7.c:38466:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapExtractNodeValue(pA,&sA,FALSE);
^
ph7.c:38467:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapExtractNodeValue(pB,&sB,FALSE);
^
ph7.c:38482:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = PH7_MemObjCmp(&sA,&sB,FALSE,0);
^
ph7.c:38540:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapNodeCmp(pA,pB,FALSE);
^
ph7.c:38547:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapExtractNodeValue(pA,&sA,FALSE);
^
ph7.c:38548:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapExtractNodeValue(pB,&sB,FALSE);
^
ph7.c:38563:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = PH7_MemObjCmp(&sA,&sB,FALSE,0);
^
ph7.c:39205:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int bRecursive = FALSE;
^
ph7.c:39841:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bStrict = FALSE;
^
ph7.c:40017:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_HashmapRelease(pMap,FALSE);
^
ph7.c:40055:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bPreserve = FALSE;
^
ph7.c:40222:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = HashmapInsertNode(pMap,pCur,FALSE);
^
ph7.c:40244:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   HashmapInsertNode(pSrc,pRnode,FALSE);
^
ph7.c:40322:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bStrict = FALSE;
^
ph7.c:41315:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bPreserve = FALSE;
^
ph7.c:41373:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 bStrict = FALSE;
^
ph7.c:42033:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   keep = FALSE;
^
ph7.c:42498:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PH7_HashmapExtractNodeValue(pEntry,&sValue,FALSE);
^
ph7.c:44962:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if( aLabel[n].bRef == FALSE ){
^
ph7.c:46272:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:46530:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sLabel.bRef  = FALSE;
^
ph7.c:48647:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = GenStateCompileFunc(&(*pGen),pName,iFlags,FALSE,0);
^
ph7.c:48975:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  doBody = FALSE;
^
ph7.c:49100:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   pBase = PH7_VmExtractClass(pGen->pVm,pBaseName->zString,pBaseName->nByte,FALSE,0);
^
ph7.c:49235:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   rc = GenStateCompileClassMethod(&(*pGen),0,FALSE/* Only method signature*/,iFlags,pClass);
^
ph7.c:49334:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   pBase = PH7_VmExtractClass(pGen->pVm,pBaseName->zString,pBaseName->nByte,FALSE,0);
^
ph7.c:49379:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pInterface = PH7_VmExtractClass(pGen->pVm,pIntName->zString,pIntName->nByte,FALSE,0);
^
ph7.c:50755:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if( rc == FALSE ){
^
ph7.c:50798:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( xCons == 0 && GenStateisLangConstruct(nKeyword) == FALSE ){
^
ph7.c:50981:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   rc = PH7_CompilePHP(pCodeGen,&aPhpToken,FALSE);
^
ph7.c:55565:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_InputFormat(sprintfConsumer,pCtx,zFormat,nLen,nArg,apArg,0,FALSE);
^
ph7.c:55607:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 PH7_InputFormat(printfConsumer,pCtx,zFormat,nLen,nArg,apArg,(void *)&nCounter,FALSE);
^
ph7.c:55761:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int raw_output = FALSE;
^
ph7.c:55805:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int raw_output = FALSE;
^
ph7.c:56812:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return FALSE;
^
ph7.c:56951:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  pAux = (strtok_aux_data *)ph7_context_alloc_chunk(pCtx,sizeof(strtok_aux_data),TRUE,FALSE);
^
ph7.c:56959:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   zDup = (char *)ph7_context_alloc_chunk(pCtx,(unsigned int)(nLen+1),TRUE,FALSE);
^
ph7.c:57204:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  zDup = (char *)ph7_context_alloc_chunk(pRep->pCtx,(unsigned int)nByte,FALSE,
^
ph7.c:61885:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_INT) ? TRUE : FALSE;
^
ph7.c:61893:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_REAL) ? TRUE : FALSE;
^
ph7.c:61901:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_BOOL) ? TRUE : FALSE;
^
ph7.c:61909:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_STRING) ? TRUE : FALSE;
^
ph7.c:61917:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_NULL) ? TRUE : FALSE;
^
ph7.c:61936:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 rc = PH7_VmIsCallable(pVal->pVm,pVal,FALSE);
^
ph7.c:61945:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_SCALAR) ? TRUE : FALSE;
^
ph7.c:61953:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_HASHMAP) ? TRUE : FALSE;
^
ph7.c:61961:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_OBJ) ? TRUE : FALSE;
^
ph7.c:61969:0: information: Skipping configuration 'FALSE;SYMISC_STD_TYPES' since the value of 'FALSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (pVal->iFlags & MEMOBJ_RES) ? TRUE : FALSE;
^
ph7.c:25854:6: style: Condition 'pFileStream' is always false [knownConditionTrueFalse]
 if( pFileStream ){
     ^
ph7.c:25835:37: note: Assignment 'pFileStream=0', assigned value is 0
 const ph7_io_stream *pFileStream = 0;
                                    ^
ph7.c:25854:6: note: Condition 'pFileStream' is always false
 if( pFileStream ){
     ^
ph7.c:20012:20: style: Variable 'zMode' is assigned a value that is never used. [unreadVariable]
 const char *zMode = "a";
                   ^
ph7.c:20015:9: style: Variable 'zMode' is assigned a value that is never used. [unreadVariable]
  zMode = ph7_value_to_string(apArg[0],0);
        ^
ph7.c:13476:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = SXERR_EXISTS;
     ^
ph7.c:13473:5: note: rc is assigned
 rc = SXRET_OK; /* Stupid cc warning */
    ^
ph7.c:13476:6: note: rc is overwritten
  rc = SXERR_EXISTS;
     ^
ph7.c:50049:6: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
  rc = PH7_CompileBlock(&(*pGen),0);
     ^
ph7.c:50012:6: note: rc is assigned
  rc = SXRET_OK;
     ^
ph7.c:50049:6: note: rc is overwritten
  rc = PH7_CompileBlock(&(*pGen),0);
     ^
ph7.c:60721:7: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
   rc = PH7_IO_ERR;
      ^
ph7.c:60702:5: note: rc is assigned
 rc = PH7_OK; /* cc warning */
    ^
ph7.c:60721:7: note: rc is overwritten
   rc = PH7_IO_ERR;
      ^
ph7.c:25192:0: information: Skipping configuration 'O_TEMP' since the value of 'O_TEMP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  iOpen |= O_TEMP;
^
ph7.c:13494:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 pCtx = 0; /* cc warning */
 ^
ph7.c:13495:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 pPath = 0;
 ^
ph7.c:13496:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 IncludeOnce = 0;
 ^
ph7.c:25859:4: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
   SXUNUSED(pVm); /* cc warning */
   ^
ph7.c:25891:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVm); /* cc warning */
 ^
ph7.c:25923:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVm); /* cc warning */
 ^
ph7.c:25955:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pVm); /* cc warning */
 ^
ph7.c:30479:14: warning: The address of local variable 'sAux' might be accessed at non-zero index. [objectIndex]
 zEnd = &zSrc[nSize];
             ^
ph7.c:13236:9: note: Address of variable taken here.
 SyZero(&sAux,sizeof(sAux)-sizeof(sAux.zWorker));
        ^
ph7.c:13236:9: note: Calling function 'SyZero', 1st argument '&sAux' value is lifetime=sAux
 SyZero(&sAux,sizeof(sAux)-sizeof(sAux.zWorker));
        ^
ph7.c:30479:14: note: The address of local variable 'sAux' might be accessed at non-zero index.
 zEnd = &zSrc[nSize];
             ^
ph7.c:1198:7: style: struct member 'sytime::tm_usec' is never used. [unusedStructMember]
 long tm_usec; /* microseconds */
      ^
ph7.c:1492:8: style: struct member 'MD5Context::buf' is never used. [unusedStructMember]
 sxu32 buf[4];
       ^
ph7.c:1493:8: style: struct member 'MD5Context::bits' is never used. [unusedStructMember]
 sxu32 bits[2];
       ^
ph7.c:1494:16: style: struct member 'MD5Context::in' is never used. [unusedStructMember]
 unsigned char in[64];
               ^
ph7.c:1499:16: style: struct member 'SHA1Context::state' is never used. [unusedStructMember]
  unsigned int state[5];
               ^
ph7.c:1500:16: style: struct member 'SHA1Context::count' is never used. [unusedStructMember]
  unsigned int count[2];
               ^
ph7.c:1501:17: style: struct member 'SHA1Context::buffer' is never used. [unusedStructMember]
  unsigned char buffer[64];
                ^
ph7.c:13494:7: style: Variable 'pCtx' is assigned a value that is never used. [unreadVariable]
 pCtx = 0; /* cc warning */
      ^
ph7.c:13495:8: style: Variable 'pPath' is assigned a value that is never used. [unreadVariable]
 pPath = 0;
       ^
ph7.c:13496:14: style: Variable 'IncludeOnce' is assigned a value that is never used. [unreadVariable]
 IncludeOnce = 0;
             ^
ph7.c:25859:4: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
   SXUNUSED(pVm); /* cc warning */
   ^
ph7.c:25891:2: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVm); /* cc warning */
 ^
ph7.c:25923:2: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVm); /* cc warning */
 ^
ph7.c:25955:2: style: Variable 'pVm' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pVm); /* cc warning */
 ^
ph7.c:25712:2: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
 SXUNUSED(pStream); /* cc warning */
 ^
ph7.c:25712:2: style: Variable 'pStream' is assigned a value that is never used. [unreadVariable]
 SXUNUSED(pStream); /* cc warning */
 ^
ph7.c:49684:0: style: The function 'PH7_CompileAbstractClass' is never used. [unusedFunction]

^
ph7.c:45925:0: style: The function 'PH7_CompileBacktic' is never used. [unusedFunction]

^
ph7.c:49714:0: style: The function 'PH7_CompileClass' is never used. [unusedFunction]

^
ph7.c:49057:0: style: The function 'PH7_CompileClassInterface' is never used. [unusedFunction]

^
ph7.c:49698:0: style: The function 'PH7_CompileFinalClass' is never used. [unusedFunction]

^
ph7.c:45586:0: style: The function 'PH7_CompileHereDoc' is never used. [unusedFunction]

^
ph7.c:45162:0: style: The function 'PH7_CompileNowDoc' is never used. [unusedFunction]

^
ph7.c:45035:0: style: The function 'PH7_CompileNumLiteral' is never used. [unusedFunction]

^
ph7.c:45077:0: style: The function 'PH7_CompileSimpleString' is never used. [unusedFunction]

^
ph7.c:45574:0: style: The function 'PH7_CompileString' is never used. [unusedFunction]

^
ph7.c:61430:0: style: The function 'ph7_array_fetch' is never used. [unusedFunction]

^
ph7.c:60629:0: style: The function 'ph7_compile' is never used. [unusedFunction]

^
ph7.c:61675:0: style: The function 'ph7_context_random_string' is never used. [unusedFunction]

^
ph7.c:61395:0: style: The function 'ph7_context_realloc_chunk' is never used. [unusedFunction]

^
ph7.c:61015:0: style: The function 'ph7_delete_constant' is never used. [unusedFunction]

^
ph7.c:60942:0: style: The function 'ph7_delete_function' is never used. [unusedFunction]

^
ph7.c:60392:0: style: The function 'ph7_lib_copyright' is never used. [unusedFunction]

^
ph7.c:60260:0: style: The function 'ph7_lib_init' is never used. [unusedFunction]

^
ph7.c:60347:0: style: The function 'ph7_lib_is_threadsafe' is never used. [unusedFunction]

^
ph7.c:61569:0: style: The function 'ph7_object_fetch_attr' is never used. [unusedFunction]

^
ph7.c:61587:0: style: The function 'ph7_object_get_class_name' is never used. [unusedFunction]

^
ph7.c:60834:0: style: The function 'ph7_vm_reset' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

